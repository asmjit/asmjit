// [AsmJit]
// Complete x86/x64 JIT and Remote Assembler for C++.
//
// [License]
// Zlib - See LICENSE.md file in the package.

// [Guard]
#ifndef _APP_TEST_GENOPCODE_H
#define _APP_TEST_GENOPCODE_H

// [Dependencies]
#include <asmjit/asmjit.h>

namespace asmgen {

enum { kGenOpCodeInstCount = 2656 };

// Generate all instructions asmjit can emit.
static void opcode(asmjit::X86Assembler& a) {
  using namespace asmjit;
  using namespace asmjit::x86;

  const X86GpReg& zax = a.zax;
  const X86GpReg& zdx = a.zdx;
  const X86GpReg& zcx = a.zcx;
  const X86GpReg& zbx = a.zbx;
  const X86GpReg& zsp = a.zsp;
  const X86GpReg& zbp = a.zbp;
  const X86GpReg& zsi = a.zsi;
  const X86GpReg& zdi = a.zdi;

  // Prevent crashing when the generated function is called (for debugging to
  // see disassembly).
  a.ret();

  // When any problem is found this section can be used to customize the index
  // of the registers used.
  X86GpReg gp0 = zax;
  X86GpReg gp1 = zsi;
  X86FpReg fpx = fp6;

  X86Mem ptr_gp0 = ptr(gp0);
  X86Mem ptr_gp1 = ptr(gp1);

  X86Mem vm32x = ptr(gp0, xmm1);
  X86Mem vm32y = ptr(gp0, ymm1);

  X86Mem intptr_gp0 = a.intptr_ptr(gp0);
  X86Mem intptr_gp1 = a.intptr_ptr(gp1);

  // Base.
  a.adc(al, 1);
  a.adc(bl, 1);
  a.adc(ax, 1);
  a.adc(bx, 1);
  a.adc(eax, 1);
  a.adc(ebx, 1);
  a.adc(gp0, gp1);
  a.adc(gp0, intptr_gp1);
  a.adc(gp0, 0);
  a.adc(intptr_gp0, gp1);
  a.adc(intptr_gp0, 0);
  a.add(al, 1);
  a.add(bl, 1);
  a.add(ax, 1);
  a.add(bx, 1);
  a.add(eax, 1);
  a.add(ebx, 1);
  a.add(gp0, gp1);
  a.add(gp0, intptr_gp1);
  a.add(gp0, 0);
  a.add(intptr_gp0, gp1);
  a.add(intptr_gp0, 0);
  a.and_(al, 1);
  a.and_(bl, 1);
  a.and_(ax, 1);
  a.and_(bx, 1);
  a.and_(eax, 1);
  a.and_(ebx, 1);
  a.and_(gp0, gp1);
  a.and_(gp0, intptr_gp1);
  a.and_(gp0, 0);
  a.and_(intptr_gp0, gp1);
  a.and_(intptr_gp0, 0);
  a.bswap(gp0);
  a.bt(gp0, gp1);
  a.bt(intptr_gp0, gp1);
  a.bt(gp0, 0);
  a.bt(intptr_gp0, 0);
  a.btc(gp0, gp1);
  a.btc(intptr_gp0, gp1);
  a.btc(gp0, 0);
  a.btc(intptr_gp0, 0);
  a.btr(gp0, gp1);
  a.btr(intptr_gp0, gp1);
  a.btr(gp0, 0);
  a.btr(intptr_gp0, 0);
  a.bts(gp0, gp1);
  a.bts(intptr_gp0, gp1);
  a.bts(gp0, 0);
  a.bts(intptr_gp0, 0);
  a.call(gp0);
  a.call(intptr_gp0);
  a.cbw();
  a.cwde();
  a.clc();
  a.cld();
  a.cmc();
  a.cmp(al, 1);
  a.cmp(bl, 1);
  a.cmp(ax, 1);
  a.cmp(bx, 1);
  a.cmp(eax, 1);
  a.cmp(ebx, 1);
  a.cmp(gp0, gp1);
  a.cmp(gp0, intptr_gp1);
  a.cmp(gp0, 0);
  a.cmp(intptr_gp0, gp1);
  a.cmp(intptr_gp0, 0);
  a.cmpxchg(gp0, gp1);
  a.cmpxchg(intptr_gp0, gp1);
  a.cmpxchg8b(ptr_gp0);
  a.cpuid();
  a.crc32(gp0, ptr_gp1);
  a.dec(gp0);
  a.dec(intptr_gp0);
  a.div(gp0);
  a.div(intptr_gp0);
  a.idiv(gp0);
  a.idiv(intptr_gp0);
  a.imul(gp0);
  a.imul(intptr_gp0);
  a.imul(gp0, gp1);
  a.imul(gp0, intptr_gp1);
  a.imul(gp0, 0);
  a.imul(gp0, gp1, 0);
  a.imul(gp0, intptr_gp1, 0);
  a.inc(gp0);
  a.inc(intptr_gp0);
  a.int3();
  a.lea(gp0, intptr_gp1);
  a.mov(gp0, gp1);
  a.mov(gp0, intptr_gp1);
  a.mov(gp0, 0);
  a.mov(intptr_gp0, gp1);
  a.mov(intptr_gp0, 0);
  a.movsx(gp0, al);
  a.movsx(gp0, byte_ptr(gp1));
  a.movzx(gp0, al);
  a.movzx(gp0, byte_ptr(gp1));
  a.movbe(gp0, ptr_gp1);
  a.movbe(ptr_gp0, gp1);
  a.mul(gp0);
  a.mul(intptr_gp0);
  a.neg(gp0);
  a.neg(intptr_gp0);
  a.nop();
  a.not_(gp0);
  a.not_(intptr_gp0);
  a.or_(al, 1);
  a.or_(bl, 1);
  a.or_(ax, 1);
  a.or_(bx, 1);
  a.or_(eax, 1);
  a.or_(ebx, 1);
  a.or_(gp0, gp1);
  a.or_(gp0, intptr_gp1);
  a.or_(gp0, 0);
  a.or_(intptr_gp0, gp1);
  a.or_(intptr_gp0, 0);
  a.pop(gp0);
  a.pop(intptr_gp0);
  a.push(gp0);
  a.push(intptr_gp0);
  a.push(0);
  a.rcl(gp0, cl);
  a.rcl(gp0, 0);
  a.rcl(gp0, 1);
  a.rcl(intptr_gp0, cl);
  a.rcl(intptr_gp0, 0);
  a.rcl(intptr_gp0, 1);
  a.rcr(gp0, cl);
  a.rcr(gp0, 0);
  a.rcr(gp0, 1);
  a.rcr(intptr_gp0, cl);
  a.rcr(intptr_gp0, 0);
  a.rcr(intptr_gp0, 1);
  a.rdtsc();
  a.rdtscp();
  a.ret();
  a.ret(0);
  a.rol(gp0, cl);
  a.rol(gp0, 0);
  a.rol(gp0, 1);
  a.rol(intptr_gp0, cl);
  a.rol(intptr_gp0, 0);
  a.rol(intptr_gp0, 1);
  a.ror(gp0, cl);
  a.ror(gp0, 0);
  a.ror(gp0, 1);
  a.ror(intptr_gp0, cl);
  a.ror(intptr_gp0, 0);
  a.ror(intptr_gp0, 1);
  a.sbb(al, 1);
  a.sbb(bl, 1);
  a.sbb(ax, 1);
  a.sbb(bx, 1);
  a.sbb(eax, 1);
  a.sbb(ebx, 1);
  a.sbb(gp0, gp1);
  a.sbb(gp0, intptr_gp1);
  a.sbb(gp0, 0);
  a.sbb(intptr_gp0, gp1);
  a.sbb(intptr_gp0, 0);
  a.sal(gp0, cl);
  a.sal(gp0, 0);
  a.sal(gp0, 1);
  a.sal(intptr_gp0, cl);
  a.sal(intptr_gp0, 0);
  a.sal(intptr_gp0, 1);
  a.sar(gp0, cl);
  a.sar(gp0, 0);
  a.sar(gp0, 1);
  a.sar(intptr_gp0, cl);
  a.sar(intptr_gp0, 0);
  a.sar(intptr_gp0, 1);
  a.shl(gp0, cl);
  a.shl(gp0, 0);
  a.shl(gp0, 1);
  a.shl(intptr_gp0, cl);
  a.shl(intptr_gp0, 0);
  a.shl(intptr_gp0, 1);
  a.shr(gp0, cl);
  a.shr(gp0, 0);
  a.shr(gp0, 1);
  a.shr(intptr_gp0, cl);
  a.shr(intptr_gp0, 0);
  a.shr(intptr_gp0, 1);
  a.shld(gp0, gp1, cl);
  a.shld(gp0, gp1, 0);
  a.shld(intptr_gp0, gp1, cl);
  a.shld(intptr_gp0, gp1, 0);
  a.shrd(gp0, gp1, cl);
  a.shrd(gp0, gp1, 0);
  a.shrd(intptr_gp0, gp1, cl);
  a.shrd(intptr_gp0, gp1, 0);
  a.stc();
  a.std();
  a.sub(al, 1);
  a.sub(bl, 1);
  a.sub(ax, 1);
  a.sub(bx, 1);
  a.sub(eax, 1);
  a.sub(ebx, 1);
  a.sub(gp0, gp1);
  a.sub(gp0, intptr_gp1);
  a.sub(gp0, 0);
  a.sub(intptr_gp0, gp1);
  a.sub(intptr_gp0, 0);
  a.test(gp0, gp1);
  a.test(gp0, 0);
  a.test(intptr_gp0, gp1);
  a.test(intptr_gp0, 0);
  a.ud2();
  a.xadd(gp0, gp1);
  a.xadd(intptr_gp0, gp1);
  a.xchg(gp0, gp1);
  a.xchg(intptr_gp0, gp1);
  a.xchg(gp0, intptr_gp1);
  a.xor_(al, 1);
  a.xor_(bl, 1);
  a.xor_(ax, 1);
  a.xor_(bx, 1);
  a.xor_(eax, 1);
  a.xor_(ebx, 1);
  a.xor_(gp0, gp1);
  a.xor_(gp0, intptr_gp1);
  a.xor_(gp0, 0);
  a.xor_(intptr_gp0, gp1);
  a.xor_(intptr_gp0, 0);

  a.nop();

  a.lodsb();
  a.lodsd();
  a.lodsw();
  a.rep_lodsb();
  a.rep_lodsd();
  a.rep_lodsw();

  a.movsb();
  a.movsd();
  a.movsw();
  a.rep_movsb();
  a.rep_movsd();
  a.rep_movsw();

  a.stosb();
  a.stosd();
  a.stosw();
  a.rep_stosb();
  a.rep_stosd();
  a.rep_stosw();

  a.cmpsb();
  a.cmpsd();
  a.cmpsw();
  a.repe_cmpsb();
  a.repe_cmpsd();
  a.repe_cmpsw();
  a.repne_cmpsb();
  a.repne_cmpsd();
  a.repne_cmpsw();

  a.scasb();
  a.scasd();
  a.scasw();
  a.repe_scasb();
  a.repe_scasd();
  a.repe_scasw();
  a.repne_scasb();
  a.repne_scasd();
  a.repne_scasw();

  // Label...Jcc/Jecxz/Jmp.
  {
    a.nop();

    Label L(a);
    a.bind(L);

    a.ja(L);
    a.jae(L);
    a.jb(L);
    a.jbe(L);
    a.jc(L);
    a.je(L);
    a.jg(L);
    a.jge(L);
    a.jl(L);
    a.jle(L);
    a.jna(L);
    a.jnae(L);
    a.jnb(L);
    a.jnbe(L);
    a.jnc(L);
    a.jne(L);
    a.jng(L);
    a.jnge(L);
    a.jnl(L);
    a.jnle(L);
    a.jno(L);
    a.jnp(L);
    a.jns(L);
    a.jnz(L);
    a.jo(L);
    a.jp(L);
    a.jpe(L);
    a.jpo(L);
    a.js(L);
    a.jz(L);
    a.jecxz(ecx, L);
    a.jmp(L);
  }

  // Jcc/Jecxz/Jmp...Label.
  {
    a.nop();

    Label L(a);
    a.ja(L);
    a.jae(L);
    a.jb(L);
    a.jbe(L);
    a.jc(L);
    a.je(L);
    a.jg(L);
    a.jge(L);
    a.jl(L);
    a.jle(L);
    a.jna(L);
    a.jnae(L);
    a.jnb(L);
    a.jnbe(L);
    a.jnc(L);
    a.jne(L);
    a.jng(L);
    a.jnge(L);
    a.jnl(L);
    a.jnle(L);
    a.jno(L);
    a.jnp(L);
    a.jns(L);
    a.jnz(L);
    a.jo(L);
    a.jp(L);
    a.jpe(L);
    a.jpo(L);
    a.js(L);
    a.jz(L);
    a.jecxz(ecx, L);
    a.jmp(L);
    a.bind(L);
  }

  // Fpu.
  a.nop();

  a.f2xm1();
  a.fabs();
  a.fadd(fp0, fpx);
  a.fadd(fpx, fp0);
  a.fadd(dword_ptr(gp0));
  a.fadd(qword_ptr(gp0));
  a.faddp(fpx);
  a.faddp();
  a.fbld(dword_ptr(gp0));
  a.fbstp(dword_ptr(gp0));
  a.fchs();
  a.fclex();
  a.fcom(fpx);
  a.fcom();
  a.fcom(dword_ptr(gp0));
  a.fcom(qword_ptr(gp0));
  a.fcomp(fpx);
  a.fcomp();
  a.fcomp(dword_ptr(gp0));
  a.fcomp(qword_ptr(gp0));
  a.fcompp();
  a.fcos();
  a.fdecstp();
  a.fdiv(fp0, fpx);
  a.fdiv(fpx, fp0);
  a.fdiv(dword_ptr(gp0));
  a.fdiv(qword_ptr(gp0));
  a.fdivp(fpx);
  a.fdivp();
  a.fdivr(fp0, fpx);
  a.fdivr(fpx, fp0);
  a.fdivr(dword_ptr(gp0));
  a.fdivr(qword_ptr(gp0));
  a.fdivrp(fpx);
  a.fdivrp();
  a.fiadd(dword_ptr(gp0));
  a.ficom(word_ptr(gp0));
  a.ficom(dword_ptr(gp0));
  a.ficomp(word_ptr(gp0));
  a.ficomp(dword_ptr(gp0));
  a.fidiv(word_ptr(gp0));
  a.fidiv(dword_ptr(gp0));
  a.fidivr(word_ptr(gp0));
  a.fidivr(dword_ptr(gp0));
  a.fild(word_ptr(gp0));
  a.fild(dword_ptr(gp0));
  a.fild(qword_ptr(gp0));
  a.fimul(word_ptr(gp0));
  a.fimul(dword_ptr(gp0));
  a.fincstp();
  a.finit();
  a.fninit();
  a.fisub(word_ptr(gp0));
  a.fisub(dword_ptr(gp0));
  a.fisubr(word_ptr(gp0));
  a.fisubr(dword_ptr(gp0));
  a.fist(word_ptr(gp0));
  a.fist(dword_ptr(gp0));
  a.fistp(word_ptr(gp0));
  a.fistp(dword_ptr(gp0));
  a.fistp(qword_ptr(gp0));
  a.fld(dword_ptr(gp0));
  a.fld(qword_ptr(gp0));
  a.fld(tword_ptr(gp0));
  a.fld1();
  a.fldl2t();
  a.fldl2e();
  a.fldpi();
  a.fldlg2();
  a.fldln2();
  a.fldz();
  a.fldcw(ptr_gp0);
  a.fldenv(ptr_gp0);
  a.fmul(fp0, fpx);
  a.fmul(fpx, fp0);
  a.fmul(dword_ptr(gp0));
  a.fmul(qword_ptr(gp0));
  a.fmulp(fpx);
  a.fmulp();
  a.fnclex();
  a.fnop();
  a.fnsave(ptr_gp0);
  a.fnstenv(ptr_gp0);
  a.fnstcw(ptr_gp0);
  a.fpatan();
  a.fprem();
  a.fprem1();
  a.fptan();
  a.frndint();
  a.frstor(ptr_gp0);
  a.fsave(ptr_gp0);
  a.fscale();
  a.fsin();
  a.fsincos();
  a.fsqrt();
  a.fst(dword_ptr(gp0));
  a.fst(qword_ptr(gp0));
  a.fstp(dword_ptr(gp0));
  a.fstp(qword_ptr(gp0));
  a.fstp(tword_ptr(gp0));
  a.fstcw(ptr_gp0);
  a.fstenv(ptr_gp0);
  a.fsub(fp0, fpx);
  a.fsub(fpx, fp0);
  a.fsub(dword_ptr(gp0));
  a.fsub(qword_ptr(gp0));
  a.fsubp(fpx);
  a.fsubp();
  a.fsubr(fp0, fpx);
  a.fsubr(fpx, fp0);
  a.fsubr(dword_ptr(gp0));
  a.fsubr(qword_ptr(gp0));
  a.fsubrp(fpx);
  a.fsubrp();
  a.ftst();
  a.fucom(fpx);
  a.fucom();
  a.fucom(fpx);
  a.fucomi(fpx);
  a.fucomip(fpx);
  a.fucomp(fpx);
  a.fucompp();
  a.fxam();
  a.fxrstor(ptr_gp0);
  a.fxsave(ptr_gp0);
  a.fxtract();
  a.fyl2x();
  a.fyl2xp1();

  // MMX/MMX-EXT.
  a.nop();

  a.movd(ptr_gp0, mm7);
  a.movd(eax, mm7);
  a.movd(mm0, ptr_gp0);
  a.movd(mm0, esi);
  a.movq(mm0, mm7);
  a.movq(ptr_gp0, mm7);
  a.movq(mm0, ptr_gp0);
  a.packuswb(mm0, mm7);
  a.packuswb(mm0, ptr_gp0);
  a.paddb(mm0, mm7);
  a.paddb(mm0, ptr_gp0);
  a.paddw(mm0, mm7);
  a.paddw(mm0, ptr_gp0);
  a.paddd(mm0, mm7);
  a.paddd(mm0, ptr_gp0);
  a.paddsb(mm0, mm7);
  a.paddsb(mm0, ptr_gp0);
  a.paddsw(mm0, mm7);
  a.paddsw(mm0, ptr_gp0);
  a.paddusb(mm0, mm7);
  a.paddusb(mm0, ptr_gp0);
  a.paddusw(mm0, mm7);
  a.paddusw(mm0, ptr_gp0);
  a.pand(mm0, mm7);
  a.pand(mm0, ptr_gp0);
  a.pandn(mm0, mm7);
  a.pandn(mm0, ptr_gp0);
  a.pcmpeqb(mm0, mm7);
  a.pcmpeqb(mm0, ptr_gp0);
  a.pcmpeqw(mm0, mm7);
  a.pcmpeqw(mm0, ptr_gp0);
  a.pcmpeqd(mm0, mm7);
  a.pcmpeqd(mm0, ptr_gp0);
  a.pcmpgtb(mm0, mm7);
  a.pcmpgtb(mm0, ptr_gp0);
  a.pcmpgtw(mm0, mm7);
  a.pcmpgtw(mm0, ptr_gp0);
  a.pcmpgtd(mm0, mm7);
  a.pcmpgtd(mm0, ptr_gp0);
  a.pmulhw(mm0, mm7);
  a.pmulhw(mm0, ptr_gp0);
  a.pmullw(mm0, mm7);
  a.pmullw(mm0, ptr_gp0);
  a.por(mm0, mm7);
  a.por(mm0, ptr_gp0);
  a.pmaddwd(mm0, mm7);
  a.pmaddwd(mm0, ptr_gp0);
  a.pslld(mm0, mm7);
  a.pslld(mm0, ptr_gp0);
  a.pslld(mm0, 0);
  a.psllq(mm0, mm7);
  a.psllq(mm0, ptr_gp0);
  a.psllq(mm0, 0);
  a.psllw(mm0, mm7);
  a.psllw(mm0, ptr_gp0);
  a.psllw(mm0, 0);
  a.psrad(mm0, mm7);
  a.psrad(mm0, ptr_gp0);
  a.psrad(mm0, 0);
  a.psraw(mm0, mm7);
  a.psraw(mm0, ptr_gp0);
  a.psraw(mm0, 0);
  a.psrld(mm0, mm7);
  a.psrld(mm0, ptr_gp0);
  a.psrld(mm0, 0);
  a.psrlq(mm0, mm7);
  a.psrlq(mm0, ptr_gp0);
  a.psrlq(mm0, 0);
  a.psrlw(mm0, mm7);
  a.psrlw(mm0, ptr_gp0);
  a.psrlw(mm0, 0);
  a.psubb(mm0, mm7);
  a.psubb(mm0, ptr_gp0);
  a.psubw(mm0, mm7);
  a.psubw(mm0, ptr_gp0);
  a.psubd(mm0, mm7);
  a.psubd(mm0, ptr_gp0);
  a.psubsb(mm0, mm7);
  a.psubsb(mm0, ptr_gp0);
  a.psubsw(mm0, mm7);
  a.psubsw(mm0, ptr_gp0);
  a.psubusb(mm0, mm7);
  a.psubusb(mm0, ptr_gp0);
  a.psubusw(mm0, mm7);
  a.psubusw(mm0, ptr_gp0);
  a.punpckhbw(mm0, mm7);
  a.punpckhbw(mm0, ptr_gp0);
  a.punpckhwd(mm0, mm7);
  a.punpckhwd(mm0, ptr_gp0);
  a.punpckhdq(mm0, mm7);
  a.punpckhdq(mm0, ptr_gp0);
  a.punpcklbw(mm0, mm7);
  a.punpcklbw(mm0, ptr_gp0);
  a.punpcklwd(mm0, mm7);
  a.punpcklwd(mm0, ptr_gp0);
  a.punpckldq(mm0, mm7);
  a.punpckldq(mm0, ptr_gp0);
  a.pxor(mm0, mm7);
  a.pxor(mm0, ptr_gp0);
  a.emms();

  // 3DNOW!
  a.nop();

  a.pf2id(mm0, mm7);
  a.pf2id(mm0, ptr_gp0);
  a.pf2iw(mm0, mm7);
  a.pf2iw(mm0, ptr_gp0);
  a.pfacc(mm0, mm7);
  a.pfacc(mm0, ptr_gp0);
  a.pfadd(mm0, mm7);
  a.pfadd(mm0, ptr_gp0);
  a.pfcmpeq(mm0, mm7);
  a.pfcmpeq(mm0, ptr_gp0);
  a.pfcmpge(mm0, mm7);
  a.pfcmpge(mm0, ptr_gp0);
  a.pfcmpgt(mm0, mm7);
  a.pfcmpgt(mm0, ptr_gp0);
  a.pfmax(mm0, mm7);
  a.pfmax(mm0, ptr_gp0);
  a.pfmin(mm0, mm7);
  a.pfmin(mm0, ptr_gp0);
  a.pfmul(mm0, mm7);
  a.pfmul(mm0, ptr_gp0);
  a.pfnacc(mm0, mm7);
  a.pfnacc(mm0, ptr_gp0);
  a.pfpnacc(mm0, mm7);
  a.pfpnacc(mm0, ptr_gp0);
  a.pfrcp(mm0, mm7);
  a.pfrcp(mm0, ptr_gp0);
  a.pfrcpit1(mm0, mm7);
  a.pfrcpit1(mm0, ptr_gp0);
  a.pfrcpit2(mm0, mm7);
  a.pfrcpit2(mm0, ptr_gp0);
  a.pfrsqit1(mm0, mm7);
  a.pfrsqit1(mm0, ptr_gp0);
  a.pfrsqrt(mm0, mm7);
  a.pfrsqrt(mm0, ptr_gp0);
  a.pfsub(mm0, mm7);
  a.pfsub(mm0, ptr_gp0);
  a.pfsubr(mm0, mm7);
  a.pfsubr(mm0, ptr_gp0);
  a.pi2fd(mm0, mm7);
  a.pi2fd(mm0, ptr_gp0);
  a.pi2fw(mm0, mm7);
  a.pi2fw(mm0, ptr_gp0);
  a.pswapd(mm0, mm7);
  a.pswapd(mm0, ptr_gp0);
  a.prefetch3dnow(ptr_gp0);
  a.prefetchw3dnow(ptr_gp0);
  a.femms();

  // SSE.
  a.nop();

  a.addps(xmm0, xmm7);
  a.addps(xmm0, ptr_gp0);
  a.addss(xmm0, xmm7);
  a.addss(xmm0, ptr_gp0);
  a.andnps(xmm0, xmm7);
  a.andnps(xmm0, ptr_gp0);
  a.andps(xmm0, xmm7);
  a.andps(xmm0, ptr_gp0);
  a.cmpps(xmm0, xmm0, 0);
  a.cmpps(xmm0, ptr_gp0, 0);
  a.cmpss(xmm0, xmm0, 0);
  a.cmpss(xmm0, ptr_gp0, 0);
  a.comiss(xmm0, xmm7);
  a.comiss(xmm0, ptr_gp0);
  a.cvtpi2ps(xmm0, mm7);
  a.cvtpi2ps(xmm0, ptr_gp0);
  a.cvtps2pi(mm0, xmm7);
  a.cvtps2pi(mm0, ptr_gp0);
  a.cvtsi2ss(xmm0, gp0);
  a.cvtsi2ss(xmm0, ptr_gp0);
  a.cvtss2si(gp0, xmm7);
  a.cvtss2si(gp0, ptr_gp0);
  a.cvttps2pi(mm0, xmm7);
  a.cvttps2pi(mm0, ptr_gp0);
  a.cvttss2si(gp0, xmm7);
  a.cvttss2si(gp0, ptr_gp0);
  a.divps(xmm0, xmm7);
  a.divps(xmm0, ptr_gp0);
  a.divss(xmm0, xmm7);
  a.divss(xmm0, ptr_gp0);
  a.ldmxcsr(ptr_gp0);
  a.maskmovq(mm0, mm7);
  a.maxps(xmm0, xmm7);
  a.maxps(xmm0, ptr_gp0);
  a.maxss(xmm0, xmm7);
  a.maxss(xmm0, ptr_gp0);
  a.minps(xmm0, xmm7);
  a.minps(xmm0, ptr_gp0);
  a.minss(xmm0, xmm7);
  a.minss(xmm0, ptr_gp0);
  a.movaps(xmm0, xmm7);
  a.movaps(xmm0, ptr_gp0);
  a.movaps(ptr_gp0, xmm7);
  a.movd(ptr_gp0, xmm7);
  a.movd(eax, xmm7);
  a.movd(xmm0, ptr_gp0);
  a.movd(xmm0, eax);
  a.movq(mm0, mm7);
  a.movq(xmm0, xmm7);
  a.movq(ptr_gp0, xmm7);
  a.movq(xmm0, ptr_gp0);
  a.movntq(ptr_gp0, mm7);
  a.movhlps(xmm0, xmm7);
  a.movhps(xmm0, ptr_gp0);
  a.movhps(ptr_gp0, xmm7);
  a.movlhps(xmm0, xmm7);
  a.movlps(xmm0, ptr_gp0);
  a.movlps(ptr_gp0, xmm7);
  a.movntps(ptr_gp0, xmm7);
  a.movss(xmm0, ptr_gp0);
  a.movss(ptr_gp0, xmm7);
  a.movups(xmm0, xmm7);
  a.movups(xmm0, ptr_gp0);
  a.movups(ptr_gp0, xmm7);
  a.mulps(xmm0, xmm7);
  a.mulps(xmm0, ptr_gp0);
  a.mulss(xmm0, xmm7);
  a.mulss(xmm0, ptr_gp0);
  a.orps(xmm0, xmm7);
  a.orps(xmm0, ptr_gp0);
  a.pavgb(mm0, mm7);
  a.pavgb(mm0, ptr_gp0);
  a.pavgw(mm0, mm7);
  a.pavgw(mm0, ptr_gp0);
  a.pextrw(gp0, mm7, 0);
  a.pinsrw(mm0, eax, 0);
  a.pinsrw(mm0, ptr_gp0, 0);
  a.pmaxsw(mm0, mm7);
  a.pmaxsw(mm0, ptr_gp0);
  a.pmaxub(mm0, mm7);
  a.pmaxub(mm0, ptr_gp0);
  a.pminsw(mm0, mm7);
  a.pminsw(mm0, ptr_gp0);
  a.pminub(mm0, mm7);
  a.pminub(mm0, ptr_gp0);
  a.pmovmskb(gp0, mm7);
  a.pmulhuw(mm0, mm7);
  a.pmulhuw(mm0, ptr_gp0);
  a.psadbw(mm0, mm7);
  a.psadbw(mm0, ptr_gp0);
  a.pshufw(mm0, mm7, 0);
  a.pshufw(mm0, ptr_gp0, 0);
  a.rcpps(xmm0, xmm7);
  a.rcpps(xmm0, ptr_gp0);
  a.rcpss(xmm0, xmm7);
  a.rcpss(xmm0, ptr_gp0);
  a.prefetch(ptr_gp0, 0);
  a.psadbw(xmm0, xmm7);
  a.psadbw(xmm0, ptr_gp0);
  a.rsqrtps(xmm0, xmm7);
  a.rsqrtps(xmm0, ptr_gp0);
  a.rsqrtss(xmm0, xmm7);
  a.rsqrtss(xmm0, ptr_gp0);
  a.sfence();
  a.shufps(xmm0, xmm0, 0);
  a.shufps(xmm0, ptr_gp0, 0);
  a.sqrtps(xmm0, xmm7);
  a.sqrtps(xmm0, ptr_gp0);
  a.sqrtss(xmm0, xmm7);
  a.sqrtss(xmm0, ptr_gp0);
  a.stmxcsr(ptr_gp0);
  a.subps(xmm0, xmm7);
  a.subps(xmm0, ptr_gp0);
  a.subss(xmm0, xmm7);
  a.subss(xmm0, ptr_gp0);
  a.ucomiss(xmm0, xmm7);
  a.ucomiss(xmm0, ptr_gp0);
  a.unpckhps(xmm0, xmm7);
  a.unpckhps(xmm0, ptr_gp0);
  a.unpcklps(xmm0, xmm7);
  a.unpcklps(xmm0, ptr_gp0);
  a.xorps(xmm0, xmm7);

  // SSE2.
  a.nop();

  a.addpd(xmm0, xmm7);
  a.addpd(xmm0, ptr_gp0);
  a.addsd(xmm0, xmm7);
  a.addsd(xmm0, ptr_gp0);
  a.andnpd(xmm0, xmm7);
  a.andnpd(xmm0, ptr_gp0);
  a.andpd(xmm0, xmm7);
  a.andpd(xmm0, ptr_gp0);
  a.clflush(ptr_gp0);
  a.cmppd(xmm0, xmm0, 0);
  a.cmppd(xmm0, ptr_gp0, 0);
  a.cmpsd(xmm0, xmm0, 0);
  a.cmpsd(xmm0, ptr_gp0, 0);
  a.comisd(xmm0, xmm7);
  a.comisd(xmm0, ptr_gp0);
  a.cvtdq2pd(xmm0, xmm7);
  a.cvtdq2pd(xmm0, ptr_gp0);
  a.cvtdq2ps(xmm0, xmm7);
  a.cvtdq2ps(xmm0, ptr_gp0);
  a.cvtpd2dq(xmm0, xmm7);
  a.cvtpd2dq(xmm0, ptr_gp0);
  a.cvtpd2pi(mm0, xmm7);
  a.cvtpd2pi(mm0, ptr_gp0);
  a.cvtpd2ps(xmm0, xmm7);
  a.cvtpd2ps(xmm0, ptr_gp0);
  a.cvtpi2pd(xmm0, mm7);
  a.cvtpi2pd(xmm0, ptr_gp0);
  a.cvtps2dq(xmm0, xmm7);
  a.cvtps2dq(xmm0, ptr_gp0);
  a.cvtps2pd(xmm0, xmm7);
  a.cvtps2pd(xmm0, ptr_gp0);
  a.cvtsd2si(gp0, xmm7);
  a.cvtsd2si(gp0, ptr_gp0);
  a.cvtsd2ss(xmm0, xmm7);
  a.cvtsd2ss(xmm0, ptr_gp0);
  a.cvtsi2sd(xmm0, zsi);
  a.cvtsi2sd(xmm0, ptr_gp0);
  a.cvtss2sd(xmm0, xmm7);
  a.cvtss2sd(xmm0, ptr_gp0);
  a.cvtss2si(gp0, xmm7);
  a.cvtss2si(gp0, ptr_gp0);
  a.cvttpd2pi(mm0, xmm7);
  a.cvttpd2pi(mm0, ptr_gp0);
  a.cvttpd2dq(xmm0, xmm7);
  a.cvttpd2dq(xmm0, ptr_gp0);
  a.cvttps2dq(xmm0, xmm7);
  a.cvttps2dq(xmm0, ptr_gp0);
  a.cvttsd2si(gp0, xmm7);
  a.cvttsd2si(gp0, ptr_gp0);
  a.divpd(xmm0, xmm7);
  a.divpd(xmm0, ptr_gp0);
  a.divsd(xmm0, xmm7);
  a.divsd(xmm0, ptr_gp0);
  a.lfence();
  a.maskmovdqu(xmm0, xmm7);
  a.maxpd(xmm0, xmm7);
  a.maxpd(xmm0, ptr_gp0);
  a.maxsd(xmm0, xmm7);
  a.maxsd(xmm0, ptr_gp0);
  a.mfence();
  a.minpd(xmm0, xmm7);
  a.minpd(xmm0, ptr_gp0);
  a.minsd(xmm0, xmm7);
  a.minsd(xmm0, ptr_gp0);
  a.movdqa(xmm0, xmm7);
  a.movdqa(xmm0, ptr_gp0);
  a.movdqa(ptr_gp0, xmm7);
  a.movdqu(xmm0, xmm7);
  a.movdqu(xmm0, ptr_gp0);
  a.movdqu(ptr_gp0, xmm7);
  a.movmskps(gp0, xmm7);
  a.movmskpd(gp0, xmm7);
  a.movsd(xmm0, xmm7);
  a.movsd(xmm0, ptr_gp0);
  a.movsd(ptr_gp0, xmm7);
  a.movapd(xmm0, ptr_gp0);
  a.movapd(ptr_gp0, xmm7);
  a.movdq2q(mm0, xmm7);
  a.movq2dq(xmm0, mm7);
  a.movhpd(xmm0, ptr_gp0);
  a.movhpd(ptr_gp0, xmm7);
  a.movlpd(xmm0, ptr_gp0);
  a.movlpd(ptr_gp0, xmm7);
  a.movntdq(ptr_gp0, xmm7);
  a.movnti(ptr_gp0, zsi);
  a.movntpd(ptr_gp0, xmm7);
  a.movupd(xmm0, ptr_gp0);
  a.movupd(ptr_gp0, xmm7);
  a.mulpd(xmm0, xmm7);
  a.mulpd(xmm0, ptr_gp0);
  a.mulsd(xmm0, xmm7);
  a.mulsd(xmm0, ptr_gp0);
  a.orpd(xmm0, xmm7);
  a.orpd(xmm0, ptr_gp0);
  a.packsswb(xmm0, xmm7);
  a.packsswb(xmm0, ptr_gp0);
  a.packssdw(xmm0, xmm7);
  a.packssdw(xmm0, ptr_gp0);
  a.packuswb(xmm0, xmm7);
  a.packuswb(xmm0, ptr_gp0);
  a.paddb(xmm0, xmm7);
  a.paddb(xmm0, ptr_gp0);
  a.paddw(xmm0, xmm7);
  a.paddw(xmm0, ptr_gp0);
  a.paddd(xmm0, xmm7);
  a.paddd(xmm0, ptr_gp0);
  a.paddq(mm0, mm7);
  a.paddq(mm0, ptr_gp0);
  a.paddq(xmm0, xmm7);
  a.paddq(xmm0, ptr_gp0);
  a.paddsb(xmm0, xmm7);
  a.paddsb(xmm0, ptr_gp0);
  a.paddsw(xmm0, xmm7);
  a.paddsw(xmm0, ptr_gp0);
  a.paddusb(xmm0, xmm7);
  a.paddusb(xmm0, ptr_gp0);
  a.paddusw(xmm0, xmm7);
  a.paddusw(xmm0, ptr_gp0);
  a.pand(xmm0, xmm7);
  a.pand(xmm0, ptr_gp0);
  a.pandn(xmm0, xmm7);
  a.pandn(xmm0, ptr_gp0);
  a.pause();
  a.pavgb(xmm0, xmm7);
  a.pavgb(xmm0, ptr_gp0);
  a.pavgw(xmm0, xmm7);
  a.pavgw(xmm0, ptr_gp0);
  a.pcmpeqb(xmm0, xmm7);
  a.pcmpeqb(xmm0, ptr_gp0);
  a.pcmpeqw(xmm0, xmm7);
  a.pcmpeqw(xmm0, ptr_gp0);
  a.pcmpeqd(xmm0, xmm7);
  a.pcmpeqd(xmm0, ptr_gp0);
  a.pcmpgtb(xmm0, xmm7);
  a.pcmpgtb(xmm0, ptr_gp0);
  a.pcmpgtw(xmm0, xmm7);
  a.pcmpgtw(xmm0, ptr_gp0);
  a.pcmpgtd(xmm0, xmm7);
  a.pcmpgtd(xmm0, ptr_gp0);
  a.pmaxsw(xmm0, xmm7);
  a.pmaxsw(xmm0, ptr_gp0);
  a.pmaxub(xmm0, xmm7);
  a.pmaxub(xmm0, ptr_gp0);
  a.pminsw(xmm0, xmm7);
  a.pminsw(xmm0, ptr_gp0);
  a.pminub(xmm0, xmm7);
  a.pminub(xmm0, ptr_gp0);
  a.pmovmskb(gp0, xmm7);
  a.pmulhw(xmm0, xmm7);
  a.pmulhw(xmm0, ptr_gp0);
  a.pmulhuw(xmm0, xmm7);
  a.pmulhuw(xmm0, ptr_gp0);
  a.pmullw(xmm0, xmm7);
  a.pmullw(xmm0, ptr_gp0);
  a.pmuludq(mm0, mm7);
  a.pmuludq(mm0, ptr_gp0);
  a.pmuludq(xmm0, xmm7);
  a.pmuludq(xmm0, ptr_gp0);
  a.por(xmm0, xmm7);
  a.por(xmm0, ptr_gp0);
  a.pslld(xmm0, xmm7);
  a.pslld(xmm0, ptr_gp0);
  a.pslld(xmm0, 0);
  a.psllq(xmm0, xmm7);
  a.psllq(xmm0, ptr_gp0);
  a.psllq(xmm0, 0);
  a.psllw(xmm0, xmm7);
  a.psllw(xmm0, ptr_gp0);
  a.psllw(xmm0, 0);
  a.pslldq(xmm0, 0);
  a.psrad(xmm0, xmm7);
  a.psrad(xmm0, ptr_gp0);
  a.psrad(xmm0, 0);
  a.psraw(xmm0, xmm7);
  a.psraw(xmm0, ptr_gp0);
  a.psraw(xmm0, 0);
  a.psubb(xmm0, xmm7);
  a.psubb(xmm0, ptr_gp0);
  a.psubw(xmm0, xmm7);
  a.psubw(xmm0, ptr_gp0);
  a.psubd(xmm0, xmm7);
  a.psubd(xmm0, ptr_gp0);
  a.psubq(mm0, mm7);
  a.psubq(mm0, ptr_gp0);
  a.psubq(xmm0, xmm7);
  a.psubq(xmm0, ptr_gp0);
  a.pmaddwd(xmm0, xmm7);
  a.pmaddwd(xmm0, ptr_gp0);
  a.pshufd(xmm0, xmm0, 0);
  a.pshufd(xmm0, ptr_gp0, 0);
  a.pshufhw(xmm0, xmm0, 0);
  a.pshufhw(xmm0, ptr_gp0, 0);
  a.pshuflw(xmm0, xmm0, 0);
  a.pshuflw(xmm0, ptr_gp0, 0);
  a.psrld(xmm0, xmm7);
  a.psrld(xmm0, ptr_gp0);
  a.psrld(xmm0, 0);
  a.psrlq(xmm0, xmm7);
  a.psrlq(xmm0, ptr_gp0);
  a.psrlq(xmm0, 0);
  a.psrldq(xmm0, 0);
  a.psrlw(xmm0, xmm7);
  a.psrlw(xmm0, ptr_gp0);
  a.psrlw(xmm0, 0);
  a.psubsb(xmm0, xmm7);
  a.psubsb(xmm0, ptr_gp0);
  a.psubsw(xmm0, xmm7);
  a.psubsw(xmm0, ptr_gp0);
  a.psubusb(xmm0, xmm7);
  a.psubusb(xmm0, ptr_gp0);
  a.psubusw(xmm0, xmm7);
  a.psubusw(xmm0, ptr_gp0);
  a.punpckhbw(xmm0, xmm7);
  a.punpckhbw(xmm0, ptr_gp0);
  a.punpckhwd(xmm0, xmm7);
  a.punpckhwd(xmm0, ptr_gp0);
  a.punpckhdq(xmm0, xmm7);
  a.punpckhdq(xmm0, ptr_gp0);
  a.punpckhqdq(xmm0, xmm7);
  a.punpckhqdq(xmm0, ptr_gp0);
  a.punpcklbw(xmm0, xmm7);
  a.punpcklbw(xmm0, ptr_gp0);
  a.punpcklwd(xmm0, xmm7);
  a.punpcklwd(xmm0, ptr_gp0);
  a.punpckldq(xmm0, xmm7);
  a.punpckldq(xmm0, ptr_gp0);
  a.punpcklqdq(xmm0, xmm7);
  a.punpcklqdq(xmm0, ptr_gp0);
  a.pxor(xmm0, xmm7);
  a.pxor(xmm0, ptr_gp0);
  a.sqrtpd(xmm0, xmm7);
  a.sqrtpd(xmm0, ptr_gp0);
  a.sqrtsd(xmm0, xmm7);
  a.sqrtsd(xmm0, ptr_gp0);
  a.subpd(xmm0, xmm7);
  a.subpd(xmm0, ptr_gp0);
  a.subsd(xmm0, xmm7);
  a.subsd(xmm0, ptr_gp0);
  a.ucomisd(xmm0, xmm7);
  a.ucomisd(xmm0, ptr_gp0);
  a.unpckhpd(xmm0, xmm7);
  a.unpckhpd(xmm0, ptr_gp0);
  a.unpcklpd(xmm0, xmm7);
  a.unpcklpd(xmm0, ptr_gp0);
  a.xorpd(xmm0, xmm7);

  // SSE3.
  a.nop();

  a.addsubpd(xmm0, xmm7);
  a.addsubpd(xmm0, ptr_gp0);
  a.addsubps(xmm0, xmm7);
  a.addsubps(xmm0, ptr_gp0);
  a.fisttp(dword_ptr(gp0));
  a.haddpd(xmm0, xmm7);
  a.haddpd(xmm0, ptr_gp0);
  a.haddps(xmm0, xmm7);
  a.haddps(xmm0, ptr_gp0);
  a.hsubpd(xmm0, xmm7);
  a.hsubpd(xmm0, ptr_gp0);
  a.hsubps(xmm0, xmm7);
  a.hsubps(xmm0, ptr_gp0);
  a.lddqu(xmm0, ptr_gp0);
  a.monitor();
  a.movddup(xmm0, xmm7);
  a.movddup(xmm0, ptr_gp0);
  a.movshdup(xmm0, xmm7);
  a.movshdup(xmm0, ptr_gp0);
  a.movsldup(xmm0, xmm7);
  a.movsldup(xmm0, ptr_gp0);
  a.mwait();

  // SSSE3.
  a.nop();

  a.psignb(mm0, mm7);
  a.psignb(mm0, ptr_gp0);
  a.psignb(xmm0, xmm7);
  a.psignb(xmm0, ptr_gp0);
  a.psignw(mm0, mm7);
  a.psignw(mm0, ptr_gp0);
  a.psignw(xmm0, xmm7);
  a.psignw(xmm0, ptr_gp0);
  a.psignd(mm0, mm7);
  a.psignd(mm0, ptr_gp0);
  a.psignd(xmm0, xmm7);
  a.psignd(xmm0, ptr_gp0);
  a.phaddw(mm0, mm7);
  a.phaddw(mm0, ptr_gp0);
  a.phaddw(xmm0, xmm7);
  a.phaddw(xmm0, ptr_gp0);
  a.phaddd(mm0, mm7);
  a.phaddd(mm0, ptr_gp0);
  a.phaddd(xmm0, xmm7);
  a.phaddd(xmm0, ptr_gp0);
  a.phaddsw(mm0, mm7);
  a.phaddsw(mm0, ptr_gp0);
  a.phaddsw(xmm0, xmm7);
  a.phaddsw(xmm0, ptr_gp0);
  a.phsubw(mm0, mm7);
  a.phsubw(mm0, ptr_gp0);
  a.phsubw(xmm0, xmm7);
  a.phsubw(xmm0, ptr_gp0);
  a.phsubd(mm0, mm7);
  a.phsubd(mm0, ptr_gp0);
  a.phsubd(xmm0, xmm7);
  a.phsubd(xmm0, ptr_gp0);
  a.phsubsw(mm0, mm7);
  a.phsubsw(mm0, ptr_gp0);
  a.phsubsw(xmm0, xmm7);
  a.phsubsw(xmm0, ptr_gp0);
  a.pmaddubsw(mm0, mm7);
  a.pmaddubsw(mm0, ptr_gp0);
  a.pmaddubsw(xmm0, xmm7);
  a.pmaddubsw(xmm0, ptr_gp0);
  a.pabsb(mm0, mm7);
  a.pabsb(mm0, ptr_gp0);
  a.pabsb(xmm0, xmm7);
  a.pabsb(xmm0, ptr_gp0);
  a.pabsw(mm0, mm7);
  a.pabsw(mm0, ptr_gp0);
  a.pabsw(xmm0, xmm7);
  a.pabsw(xmm0, ptr_gp0);
  a.pabsd(mm0, mm7);
  a.pabsd(mm0, ptr_gp0);
  a.pabsd(xmm0, xmm7);
  a.pabsd(xmm0, ptr_gp0);
  a.pmulhrsw(mm0, mm7);
  a.pmulhrsw(mm0, ptr_gp0);
  a.pmulhrsw(xmm0, xmm7);
  a.pmulhrsw(xmm0, ptr_gp0);
  a.pshufb(mm0, mm7);
  a.pshufb(mm0, ptr_gp0);
  a.pshufb(xmm0, xmm7);
  a.pshufb(xmm0, ptr_gp0);
  a.palignr(mm0, mm7, 0);
  a.palignr(mm0, ptr_gp0, 0);
  a.palignr(xmm0, xmm0, 0);
  a.palignr(xmm0, ptr_gp0, 0);

  // SSE4.1.
  a.nop();

  a.blendpd(xmm0, xmm0, 0);
  a.blendpd(xmm0, ptr_gp0, 0);
  a.blendps(xmm0, xmm0, 0);
  a.blendps(xmm0, ptr_gp0, 0);
  a.blendvpd(xmm0, xmm7);
  a.blendvpd(xmm0, ptr_gp0);
  a.blendvps(xmm0, xmm7);
  a.blendvps(xmm0, ptr_gp0);
  a.dppd(xmm0, xmm0, 0);
  a.dppd(xmm0, ptr_gp0, 0);
  a.dpps(xmm0, xmm0, 0);
  a.dpps(xmm0, ptr_gp0, 0);
  a.extractps(gp0, xmm0, 0);
  a.extractps(ptr_gp0, xmm0, 0);
  a.insertps(xmm0, xmm1, 0);
  a.insertps(xmm0, ptr_gp0, 0);
  a.movntdqa(xmm0, ptr_gp0);
  a.mpsadbw(xmm0, xmm0, 0);
  a.mpsadbw(xmm0, ptr_gp0, 0);
  a.packusdw(xmm0, xmm7);
  a.packusdw(xmm0, ptr_gp0);
  a.pblendvb(xmm0, xmm7);
  a.pblendvb(xmm0, ptr_gp0);
  a.pblendw(xmm0, xmm0, 0);
  a.pblendw(xmm0, ptr_gp0, 0);
  a.pcmpeqq(xmm0, xmm7);
  a.pcmpeqq(xmm0, ptr_gp0);
  a.pextrb(gp0, xmm0, 0);
  a.pextrb(ptr_gp0, xmm0, 0);
  a.pextrd(gp0, xmm0, 0);
  a.pextrd(ptr_gp0, xmm0, 0);
  a.pextrq(gp0, xmm0, 0);
  a.pextrq(ptr_gp0, xmm0, 0);
  a.pextrw(gp0, xmm0, 0);
  a.pextrw(ptr_gp0, xmm0, 0);
  a.phminposuw(xmm0, xmm7);
  a.phminposuw(xmm0, ptr_gp0);
  a.pinsrb(xmm0, eax, 0);
  a.pinsrb(xmm0, ptr_gp0, 0);
  a.pinsrd(xmm0, eax, 0);
  a.pinsrd(xmm0, ptr_gp0, 0);
  a.pinsrw(xmm0, eax, 0);
  a.pinsrw(xmm0, ptr_gp0, 0);
  a.pmaxuw(xmm0, xmm7);
  a.pmaxuw(xmm0, ptr_gp0);
  a.pmaxsb(xmm0, xmm7);
  a.pmaxsb(xmm0, ptr_gp0);
  a.pmaxsd(xmm0, xmm7);
  a.pmaxsd(xmm0, ptr_gp0);
  a.pmaxud(xmm0, xmm7);
  a.pmaxud(xmm0, ptr_gp0);
  a.pminsb(xmm0, xmm7);
  a.pminsb(xmm0, ptr_gp0);
  a.pminuw(xmm0, xmm7);
  a.pminuw(xmm0, ptr_gp0);
  a.pminud(xmm0, xmm7);
  a.pminud(xmm0, ptr_gp0);
  a.pminsd(xmm0, xmm7);
  a.pminsd(xmm0, ptr_gp0);
  a.pmovsxbw(xmm0, xmm7);
  a.pmovsxbw(xmm0, ptr_gp0);
  a.pmovsxbd(xmm0, xmm7);
  a.pmovsxbd(xmm0, ptr_gp0);
  a.pmovsxbq(xmm0, xmm7);
  a.pmovsxbq(xmm0, ptr_gp0);
  a.pmovsxwd(xmm0, xmm7);
  a.pmovsxwd(xmm0, ptr_gp0);
  a.pmovsxwq(xmm0, xmm7);
  a.pmovsxwq(xmm0, ptr_gp0);
  a.pmovsxdq(xmm0, xmm7);
  a.pmovsxdq(xmm0, ptr_gp0);
  a.pmovzxbw(xmm0, xmm7);
  a.pmovzxbw(xmm0, ptr_gp0);
  a.pmovzxbd(xmm0, xmm7);
  a.pmovzxbd(xmm0, ptr_gp0);
  a.pmovzxbq(xmm0, xmm7);
  a.pmovzxbq(xmm0, ptr_gp0);
  a.pmovzxwd(xmm0, xmm7);
  a.pmovzxwd(xmm0, ptr_gp0);
  a.pmovzxwq(xmm0, xmm7);
  a.pmovzxwq(xmm0, ptr_gp0);
  a.pmovzxdq(xmm0, xmm7);
  a.pmovzxdq(xmm0, ptr_gp0);
  a.pmuldq(xmm0, xmm7);
  a.pmuldq(xmm0, ptr_gp0);
  a.pmulld(xmm0, xmm7);
  a.pmulld(xmm0, ptr_gp0);
  a.ptest(xmm0, xmm7);
  a.ptest(xmm0, ptr_gp0);
  a.roundps(xmm0, xmm0, 0);
  a.roundps(xmm0, ptr_gp0, 0);
  a.roundss(xmm0, xmm0, 0);
  a.roundss(xmm0, ptr_gp0, 0);
  a.roundpd(xmm0, xmm0, 0);
  a.roundpd(xmm0, ptr_gp0, 0);
  a.roundsd(xmm0, xmm0, 0);
  a.roundsd(xmm0, ptr_gp0, 0);

  // SSE4.2.
  a.nop();

  a.pcmpestri(xmm0, xmm0, 0);
  a.pcmpestri(xmm0, ptr_gp0, 0);
  a.pcmpestrm(xmm0, xmm0, 0);
  a.pcmpestrm(xmm0, ptr_gp0, 0);
  a.pcmpistri(xmm0, xmm0, 0);
  a.pcmpistri(xmm0, ptr_gp0, 0);
  a.pcmpistrm(xmm0, xmm0, 0);
  a.pcmpistrm(xmm0, ptr_gp0, 0);
  a.pcmpgtq(xmm0, xmm7);
  a.pcmpgtq(xmm0, ptr_gp0);

  // SSE4a.
  a.nop();

  a.extrq(xmm0, xmm1);
  a.extrq(xmm0, 0x1, 0x2);
  a.insertq(xmm0, xmm1);
  a.insertq(xmm0, xmm1, 0x1, 0x2);
  a.movntsd(ptr_gp0, xmm0);
  a.movntss(ptr_gp0, xmm0);

  // POPCNT.
  a.nop();

  a.popcnt(gp0, ptr_gp0);

  // AESNI.
  a.nop();

  a.aesdec(xmm0, xmm7);
  a.aesdec(xmm0, ptr_gp0);
  a.aesdeclast(xmm0, xmm7);
  a.aesdeclast(xmm0, ptr_gp0);
  a.aesenc(xmm0, xmm7);
  a.aesenc(xmm0, ptr_gp0);
  a.aesenclast(xmm0, xmm7);
  a.aesenclast(xmm0, ptr_gp0);
  a.aesimc(xmm0, xmm7);
  a.aesimc(xmm0, ptr_gp0);
  a.aeskeygenassist(xmm0, xmm7, 0);
  a.aeskeygenassist(xmm0, ptr_gp0, 0);

  // PCLMULQDQ.
  a.nop();

  a.pclmulqdq(xmm0, xmm7, 0);
  a.pclmulqdq(xmm0, ptr_gp0, 0);

  // XSAVE.
  a.nop();

  a.xgetbv();
  a.xsetbv();

  a.xsave(ptr_gp0);
  a.xsaveopt(ptr_gp0);
  a.xrstor(ptr_gp0);

  // AVX.
  a.nop();

  a.vaddpd(xmm0, xmm1, xmm2);
  a.vaddpd(xmm0, xmm1, ptr_gp0);
  a.vaddpd(ymm0, ymm1, ymm2);
  a.vaddpd(ymm0, ymm1, ptr_gp0);
  a.vaddps(xmm0, xmm1, xmm2);
  a.vaddps(xmm0, xmm1, ptr_gp0);
  a.vaddps(ymm0, ymm1, ymm2);
  a.vaddps(ymm0, ymm1, ptr_gp0);
  a.vaddsd(xmm0, xmm1, xmm2);
  a.vaddsd(xmm0, xmm1, ptr_gp0);
  a.vaddss(xmm0, xmm1, xmm2);
  a.vaddss(xmm0, xmm1, ptr_gp0);
  a.vaddsubpd(xmm0, xmm1, xmm2);
  a.vaddsubpd(xmm0, xmm1, ptr_gp0);
  a.vaddsubpd(ymm0, ymm1, ymm2);
  a.vaddsubpd(ymm0, ymm1, ptr_gp0);
  a.vaddsubps(xmm0, xmm1, xmm2);
  a.vaddsubps(xmm0, xmm1, ptr_gp0);
  a.vaddsubps(ymm0, ymm1, ymm2);
  a.vaddsubps(ymm0, ymm1, ptr_gp0);
  a.vandpd(xmm0, xmm1, xmm2);
  a.vandpd(xmm0, xmm1, ptr_gp0);
  a.vandpd(ymm0, ymm1, ymm2);
  a.vandpd(ymm0, ymm1, ptr_gp0);
  a.vandps(xmm0, xmm1, xmm2);
  a.vandps(xmm0, xmm1, ptr_gp0);
  a.vandps(ymm0, ymm1, ymm2);
  a.vandps(ymm0, ymm1, ptr_gp0);
  a.vandnpd(xmm0, xmm1, xmm2);
  a.vandnpd(xmm0, xmm1, ptr_gp0);
  a.vandnpd(ymm0, ymm1, ymm2);
  a.vandnpd(ymm0, ymm1, ptr_gp0);
  a.vandnps(xmm0, xmm1, xmm2);
  a.vandnps(xmm0, xmm1, ptr_gp0);
  a.vandnps(ymm0, ymm1, ymm2);
  a.vandnps(ymm0, ymm1, ptr_gp0);
  a.vblendpd(xmm0, xmm1, xmm2, 0);
  a.vblendpd(xmm0, xmm1, ptr_gp0, 0);
  a.vblendpd(ymm0, ymm1, ymm2, 0);
  a.vblendpd(ymm0, ymm1, ptr_gp0, 0);
  a.vblendps(xmm0, xmm1, xmm2, 0);
  a.vblendps(xmm0, xmm1, ptr_gp0, 0);
  a.vblendps(ymm0, ymm1, ymm2, 0);
  a.vblendps(ymm0, ymm1, ptr_gp0, 0);
  a.vblendvpd(xmm0, xmm1, xmm2, xmm3);
  a.vblendvpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vblendvpd(ymm0, ymm1, ymm2, ymm3);
  a.vblendvpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vbroadcastf128(ymm0, ptr_gp0);
  a.vbroadcastsd(ymm0, ptr_gp0);
  a.vbroadcastss(xmm0, ptr_gp0);
  a.vbroadcastss(ymm0, ptr_gp0);
  a.vcmppd(xmm0, xmm1, xmm2, 0);
  a.vcmppd(xmm0, xmm1, ptr_gp0, 0);
  a.vcmppd(ymm0, ymm1, ymm2, 0);
  a.vcmppd(ymm0, ymm1, ptr_gp0, 0);
  a.vcmpps(xmm0, xmm1, xmm2, 0);
  a.vcmpps(xmm0, xmm1, ptr_gp0, 0);
  a.vcmpps(ymm0, ymm1, ymm2, 0);
  a.vcmpps(ymm0, ymm1, ptr_gp0, 0);
  a.vcmpsd(xmm0, xmm1, xmm2, 0);
  a.vcmpsd(xmm0, xmm1, ptr_gp0, 0);
  a.vcmpss(xmm0, xmm1, xmm2, 0);
  a.vcmpss(xmm0, xmm1, ptr_gp0, 0);
  a.vcomisd(xmm0, xmm1);
  a.vcomisd(xmm0, ptr_gp0);
  a.vcomiss(xmm0, xmm1);
  a.vcomiss(xmm0, ptr_gp0);
  a.vcvtdq2pd(xmm0, xmm1);
  a.vcvtdq2pd(xmm0, ptr_gp0);
  a.vcvtdq2pd(ymm0, xmm1);
  a.vcvtdq2pd(ymm0, ptr_gp0);
  a.vcvtdq2ps(xmm0, xmm1);
  a.vcvtdq2ps(xmm0, ptr_gp0);
  a.vcvtdq2ps(ymm0, ymm1);
  a.vcvtdq2ps(ymm0, ptr_gp0);
  a.vcvtpd2dq(xmm0, xmm1);
  a.vcvtpd2dq(xmm0, ymm1);
  a.vcvtpd2dq(xmm0, ptr_gp0);
  a.vcvtpd2ps(xmm0, xmm1);
  a.vcvtpd2ps(xmm0, ymm1);
  a.vcvtpd2ps(xmm0, ptr_gp0);
  a.vcvtps2dq(xmm0, xmm1);
  a.vcvtps2dq(xmm0, ptr_gp0);
  a.vcvtps2dq(ymm0, ymm1);
  a.vcvtps2dq(ymm0, ptr_gp0);
  a.vcvtps2pd(xmm0, xmm1);
  a.vcvtps2pd(xmm0, ptr_gp0);
  a.vcvtps2pd(ymm0, xmm1);
  a.vcvtps2pd(ymm0, ptr_gp0);
  a.vcvtsd2si(gp0, xmm1);
  a.vcvtsd2si(gp0, ptr_gp1);
  a.vcvtsd2ss(xmm0, xmm1, xmm2);
  a.vcvtsd2ss(xmm0, xmm1, ptr_gp0);
  a.vcvtsi2sd(xmm0, xmm1, gp0);
  a.vcvtsi2sd(xmm0, xmm1, ptr_gp0);
  a.vcvtsi2ss(xmm0, xmm1, gp0);
  a.vcvtsi2ss(xmm0, xmm1, ptr_gp0);
  a.vcvtss2sd(xmm0, xmm1, xmm2);
  a.vcvtss2sd(xmm0, xmm1, ptr_gp0);
  a.vcvtss2si(gp0, xmm1);
  a.vcvtss2si(gp0, ptr_gp1);
  a.vcvttpd2dq(xmm0, xmm1);
  a.vcvttpd2dq(xmm0, ymm1);
  a.vcvttpd2dq(xmm0, ptr_gp0);
  a.vcvttps2dq(xmm0, xmm1);
  a.vcvttps2dq(xmm0, ptr_gp0);
  a.vcvttps2dq(ymm0, ymm1);
  a.vcvttps2dq(ymm0, ptr_gp0);
  a.vcvttsd2si(gp0, xmm1);
  a.vcvttsd2si(gp0, ptr_gp1);
  a.vcvttss2si(gp0, xmm1);
  a.vcvttss2si(gp0, ptr_gp1);
  a.vdivpd(xmm0, xmm1, xmm2);
  a.vdivpd(xmm0, xmm1, ptr_gp0);
  a.vdivpd(ymm0, ymm1, ymm2);
  a.vdivpd(ymm0, ymm1, ptr_gp0);
  a.vdivps(xmm0, xmm1, xmm2);
  a.vdivps(xmm0, xmm1, ptr_gp0);
  a.vdivps(ymm0, ymm1, ymm2);
  a.vdivps(ymm0, ymm1, ptr_gp0);
  a.vdivsd(xmm0, xmm1, xmm2);
  a.vdivsd(xmm0, xmm1, ptr_gp0);
  a.vdivss(xmm0, xmm1, xmm2);
  a.vdivss(xmm0, xmm1, ptr_gp0);
  a.vdppd(xmm0, xmm1, xmm2, 0);
  a.vdppd(xmm0, xmm1, ptr_gp0, 0);
  a.vdpps(xmm0, xmm1, xmm2, 0);
  a.vdpps(xmm0, xmm1, ptr_gp0, 0);
  a.vdpps(ymm0, ymm1, ymm2, 0);
  a.vdpps(ymm0, ymm1, ptr_gp0, 0);
  a.vextractf128(xmm0, ymm0, 0);
  a.vextractf128(ptr_gp0, ymm1, 0);
  a.vextractps(gp0, xmm1, 0);
  a.vextractps(ptr_gp0, xmm1, 0);
  a.vhaddpd(xmm0, xmm1, xmm2);
  a.vhaddpd(xmm0, xmm1, ptr_gp0);
  a.vhaddpd(ymm0, ymm1, ymm2);
  a.vhaddpd(ymm0, ymm1, ptr_gp0);
  a.vhaddps(xmm0, xmm1, xmm2);
  a.vhaddps(xmm0, xmm1, ptr_gp0);
  a.vhaddps(ymm0, ymm1, ymm2);
  a.vhaddps(ymm0, ymm1, ptr_gp0);
  a.vhsubpd(xmm0, xmm1, xmm2);
  a.vhsubpd(xmm0, xmm1, ptr_gp0);
  a.vhsubpd(ymm0, ymm1, ymm2);
  a.vhsubpd(ymm0, ymm1, ptr_gp0);
  a.vhsubps(xmm0, xmm1, xmm2);
  a.vhsubps(xmm0, xmm1, ptr_gp0);
  a.vhsubps(ymm0, ymm1, ymm2);
  a.vhsubps(ymm0, ymm1, ptr_gp0);
  a.vinsertf128(ymm0, ymm1, xmm2, 0);
  a.vinsertf128(ymm0, ymm1, ptr_gp0, 0);
  a.vinsertps(xmm0, xmm1, xmm2, 0);
  a.vinsertps(xmm0, xmm1, ptr_gp0, 0);
  a.vlddqu(xmm0, ptr_gp0);
  a.vlddqu(ymm0, ptr_gp0);
  a.vldmxcsr(ptr_gp0);
  a.vmaskmovdqu(xmm0, xmm1);
  a.vmaskmovps(xmm0, xmm1, ptr_gp0);
  a.vmaskmovps(ymm0, ymm1, ptr_gp0);
  a.vmaskmovpd(xmm0, xmm1, ptr_gp0);
  a.vmaskmovpd(ymm0, ymm1, ptr_gp0);
  a.vmaskmovps(ptr_gp0, xmm0, xmm1);
  a.vmaskmovps(ptr_gp0, ymm0, ymm1);
  a.vmaskmovpd(ptr_gp0, xmm0, xmm1);
  a.vmaskmovpd(ptr_gp0, ymm0, ymm1);
  a.vmaxpd(xmm0, xmm1, xmm2);
  a.vmaxpd(xmm0, xmm1, ptr_gp0);
  a.vmaxpd(ymm0, ymm1, ymm2);
  a.vmaxpd(ymm0, ymm1, ptr_gp0);
  a.vmaxps(xmm0, xmm1, xmm2);
  a.vmaxps(xmm0, xmm1, ptr_gp0);
  a.vmaxps(ymm0, ymm1, ymm2);
  a.vmaxps(ymm0, ymm1, ptr_gp0);
  a.vmaxsd(xmm0, xmm1, xmm2);
  a.vmaxsd(xmm0, xmm1, ptr_gp0);
  a.vmaxss(xmm0, xmm1, xmm2);
  a.vmaxss(xmm0, xmm1, ptr_gp0);
  a.vminpd(xmm0, xmm1, xmm2);
  a.vminpd(xmm0, xmm1, ptr_gp0);
  a.vminpd(ymm0, ymm1, ymm2);
  a.vminpd(ymm0, ymm1, ptr_gp0);
  a.vminps(xmm0, xmm1, xmm2);
  a.vminps(xmm0, xmm1, ptr_gp0);
  a.vminps(ymm0, ymm1, ymm2);
  a.vminps(ymm0, ymm1, ptr_gp0);
  a.vminsd(xmm0, xmm1, xmm2);
  a.vminsd(xmm0, xmm1, ptr_gp0);
  a.vminss(xmm0, xmm1, xmm2);
  a.vminss(xmm0, xmm1, ptr_gp0);
  a.vmovapd(xmm0, xmm1);
  a.vmovapd(xmm0, ptr_gp0);
  a.vmovapd(ptr_gp0, xmm1);
  a.vmovapd(ymm0, ymm1);
  a.vmovapd(ymm0, ptr_gp0);
  a.vmovapd(ptr_gp0, ymm1);
  a.vmovaps(xmm0, xmm1);
  a.vmovaps(xmm0, ptr_gp0);
  a.vmovaps(ptr_gp0, xmm1);
  a.vmovaps(ymm0, ymm1);
  a.vmovaps(ymm0, ptr_gp0);
  a.vmovaps(ptr_gp0, ymm1);
  a.vmovd(xmm0, gp0);
  a.vmovd(xmm0, ptr_gp0);
  a.vmovd(gp0, xmm1);
  a.vmovd(ptr_gp0, xmm1);
  a.vmovddup(xmm0, xmm1);
  a.vmovddup(xmm0, ptr_gp0);
  a.vmovddup(ymm0, ymm1);
  a.vmovddup(ymm0, ptr_gp0);
  a.vmovdqa(xmm0, xmm1);
  a.vmovdqa(xmm0, ptr_gp0);
  a.vmovdqa(ptr_gp0, xmm1);
  a.vmovdqa(ymm0, ymm1);
  a.vmovdqa(ymm0, ptr_gp0);
  a.vmovdqa(ptr_gp0, ymm1);
  a.vmovdqu(xmm0, xmm1);
  a.vmovdqu(xmm0, ptr_gp0);
  a.vmovdqu(ptr_gp0, xmm1);
  a.vmovdqu(ymm0, ymm1);
  a.vmovdqu(ymm0, ptr_gp0);
  a.vmovdqu(ptr_gp0, ymm1);
  a.vmovhlps(xmm0, xmm1, xmm2);
  a.vmovhpd(xmm0, xmm1, ptr_gp0);
  a.vmovhpd(ptr_gp0, xmm1);
  a.vmovhps(xmm0, xmm1, ptr_gp0);
  a.vmovhps(ptr_gp0, xmm1);
  a.vmovlhps(xmm0, xmm1, xmm2);
  a.vmovlpd(xmm0, xmm1, ptr_gp0);
  a.vmovlpd(ptr_gp0, xmm1);
  a.vmovlps(xmm0, xmm1, ptr_gp0);
  a.vmovlps(ptr_gp0, xmm1);
  a.vmovmskpd(gp0, xmm1);
  a.vmovmskpd(gp0, ymm1);
  a.vmovmskps(gp0, xmm1);
  a.vmovmskps(gp0, ymm1);
  a.vmovntdq(ptr_gp0, xmm1);
  a.vmovntdq(ptr_gp0, ymm1);
  a.vmovntdqa(xmm0, ptr_gp0);
  a.vmovntpd(ptr_gp0, xmm1);
  a.vmovntpd(ptr_gp0, ymm1);
  a.vmovntps(ptr_gp0, xmm1);
  a.vmovntps(ptr_gp0, ymm1);
  a.vmovsd(xmm0, xmm1, xmm2);
  a.vmovsd(xmm0, ptr_gp0);
  a.vmovsd(ptr_gp0, xmm1);
  a.vmovshdup(xmm0, xmm1);
  a.vmovshdup(xmm0, ptr_gp0);
  a.vmovshdup(ymm0, ymm1);
  a.vmovshdup(ymm0, ptr_gp0);
  a.vmovsldup(xmm0, xmm1);
  a.vmovsldup(xmm0, ptr_gp0);
  a.vmovsldup(ymm0, ymm1);
  a.vmovsldup(ymm0, ptr_gp0);
  a.vmovss(xmm0, xmm1, xmm2);
  a.vmovss(xmm0, ptr_gp0);
  a.vmovss(ptr_gp0, xmm1);
  a.vmovupd(xmm0, xmm1);
  a.vmovupd(xmm0, ptr_gp0);
  a.vmovupd(ptr_gp0, xmm1);
  a.vmovupd(ymm0, ymm1);
  a.vmovupd(ymm0, ptr_gp0);
  a.vmovupd(ptr_gp0, ymm1);
  a.vmovups(xmm0, xmm1);
  a.vmovups(xmm0, ptr_gp0);
  a.vmovups(ptr_gp0, xmm1);
  a.vmovups(ymm0, ymm1);
  a.vmovups(ymm0, ptr_gp0);
  a.vmovups(ptr_gp0, ymm1);
  a.vmpsadbw(xmm0, xmm1, xmm2, 0);
  a.vmpsadbw(xmm0, xmm1, ptr_gp0, 0);
  a.vmulpd(xmm0, xmm1, xmm2);
  a.vmulpd(xmm0, xmm1, ptr_gp0);
  a.vmulpd(ymm0, ymm1, ymm2);
  a.vmulpd(ymm0, ymm1, ptr_gp0);
  a.vmulps(xmm0, xmm1, xmm2);
  a.vmulps(xmm0, xmm1, ptr_gp0);
  a.vmulps(ymm0, ymm1, ymm2);
  a.vmulps(ymm0, ymm1, ptr_gp0);
  a.vmulsd(xmm0, xmm1, xmm2);
  a.vmulsd(xmm0, xmm1, ptr_gp0);
  a.vmulss(xmm0, xmm1, xmm2);
  a.vmulss(xmm0, xmm1, ptr_gp0);
  a.vorpd(xmm0, xmm1, xmm2);
  a.vorpd(xmm0, xmm1, ptr_gp0);
  a.vorpd(ymm0, ymm1, ymm2);
  a.vorpd(ymm0, ymm1, ptr_gp0);
  a.vorps(xmm0, xmm1, xmm2);
  a.vorps(xmm0, xmm1, ptr_gp0);
  a.vorps(ymm0, ymm1, ymm2);
  a.vorps(ymm0, ymm1, ptr_gp0);
  a.vpabsb(xmm0, xmm1);
  a.vpabsb(xmm0, ptr_gp0);
  a.vpabsd(xmm0, xmm1);
  a.vpabsd(xmm0, ptr_gp0);
  a.vpabsw(xmm0, xmm1);
  a.vpabsw(xmm0, ptr_gp0);
  a.vpackssdw(xmm0, xmm1, xmm2);
  a.vpackssdw(xmm0, xmm1, ptr_gp0);
  a.vpacksswb(xmm0, xmm1, xmm2);
  a.vpacksswb(xmm0, xmm1, ptr_gp0);
  a.vpackusdw(xmm0, xmm1, xmm2);
  a.vpackusdw(xmm0, xmm1, ptr_gp0);
  a.vpackuswb(xmm0, xmm1, xmm2);
  a.vpackuswb(xmm0, xmm1, ptr_gp0);
  a.vpaddb(xmm0, xmm1, xmm2);
  a.vpaddb(xmm0, xmm1, ptr_gp0);
  a.vpaddd(xmm0, xmm1, xmm2);
  a.vpaddd(xmm0, xmm1, ptr_gp0);
  a.vpaddq(xmm0, xmm1, xmm2);
  a.vpaddq(xmm0, xmm1, ptr_gp0);
  a.vpaddw(xmm0, xmm1, xmm2);
  a.vpaddw(xmm0, xmm1, ptr_gp0);
  a.vpaddsb(xmm0, xmm1, xmm2);
  a.vpaddsb(xmm0, xmm1, ptr_gp0);
  a.vpaddsw(xmm0, xmm1, xmm2);
  a.vpaddsw(xmm0, xmm1, ptr_gp0);
  a.vpaddusb(xmm0, xmm1, xmm2);
  a.vpaddusb(xmm0, xmm1, ptr_gp0);
  a.vpaddusw(xmm0, xmm1, xmm2);
  a.vpaddusw(xmm0, xmm1, ptr_gp0);
  a.vpalignr(xmm0, xmm1, xmm2, 0);
  a.vpalignr(xmm0, xmm1, ptr_gp0, 0);
  a.vpand(xmm0, xmm1, xmm2);
  a.vpand(xmm0, xmm1, ptr_gp0);
  a.vpandn(xmm0, xmm1, xmm2);
  a.vpandn(xmm0, xmm1, ptr_gp0);
  a.vpavgb(xmm0, xmm1, xmm2);
  a.vpavgb(xmm0, xmm1, ptr_gp0);
  a.vpavgw(xmm0, xmm1, xmm2);
  a.vpavgw(xmm0, xmm1, ptr_gp0);
  a.vpblendvb(xmm0, xmm1, xmm2, xmm3);
  a.vpblendvb(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpblendw(xmm0, xmm1, xmm2, 0);
  a.vpblendw(xmm0, xmm1, ptr_gp0, 0);
  a.vpcmpeqb(xmm0, xmm1, xmm2);
  a.vpcmpeqb(xmm0, xmm1, ptr_gp0);
  a.vpcmpeqd(xmm0, xmm1, xmm2);
  a.vpcmpeqd(xmm0, xmm1, ptr_gp0);
  a.vpcmpeqq(xmm0, xmm1, xmm2);
  a.vpcmpeqq(xmm0, xmm1, ptr_gp0);
  a.vpcmpeqw(xmm0, xmm1, xmm2);
  a.vpcmpeqw(xmm0, xmm1, ptr_gp0);
  a.vpcmpgtb(xmm0, xmm1, xmm2);
  a.vpcmpgtb(xmm0, xmm1, ptr_gp0);
  a.vpcmpgtd(xmm0, xmm1, xmm2);
  a.vpcmpgtd(xmm0, xmm1, ptr_gp0);
  a.vpcmpgtq(xmm0, xmm1, xmm2);
  a.vpcmpgtq(xmm0, xmm1, ptr_gp0);
  a.vpcmpgtw(xmm0, xmm1, xmm2);
  a.vpcmpgtw(xmm0, xmm1, ptr_gp0);
  a.vpcmpestri(xmm0, xmm1, 0);
  a.vpcmpestri(xmm0, ptr_gp0, 0);
  a.vpcmpestrm(xmm0, xmm1, 0);
  a.vpcmpestrm(xmm0, ptr_gp0, 0);
  a.vpcmpistri(xmm0, xmm1, 0);
  a.vpcmpistri(xmm0, ptr_gp0, 0);
  a.vpcmpistrm(xmm0, xmm1, 0);
  a.vpcmpistrm(xmm0, ptr_gp0, 0);
  a.vpermilpd(xmm0, xmm1, xmm2);
  a.vpermilpd(xmm0, xmm1, ptr_gp0);
  a.vpermilpd(ymm0, ymm1, ymm2);
  a.vpermilpd(ymm0, ymm1, ptr_gp0);
  a.vpermilpd(xmm0, xmm1, 0);
  a.vpermilpd(xmm0, ptr_gp0, 0);
  a.vpermilpd(ymm0, ymm1, 0);
  a.vpermilpd(ymm0, ptr_gp0, 0);
  a.vpermilps(xmm0, xmm1, xmm2);
  a.vpermilps(xmm0, xmm1, ptr_gp0);
  a.vpermilps(ymm0, ymm1, ymm2);
  a.vpermilps(ymm0, ymm1, ptr_gp0);
  a.vpermilps(xmm0, xmm1, 0);
  a.vpermilps(xmm0, ptr_gp0, 0);
  a.vpermilps(ymm0, ymm1, 0);
  a.vpermilps(ymm0, ptr_gp0, 0);
  a.vperm2f128(ymm0, ymm1, ymm2, 0);
  a.vperm2f128(ymm0, ymm1, ptr_gp0, 0);
  a.vpextrb(gp0, xmm1, 0);
  a.vpextrb(ptr_gp0, xmm1, 0);
  a.vpextrd(gp0, xmm1, 0);
  a.vpextrd(ptr_gp0, xmm1, 0);
  a.vpextrw(gp0, xmm1, 0);
  a.vpextrw(ptr_gp0, xmm1, 0);
  a.vphaddd(xmm0, xmm1, xmm2);
  a.vphaddd(xmm0, xmm1, ptr_gp0);
  a.vphaddsw(xmm0, xmm1, xmm2);
  a.vphaddsw(xmm0, xmm1, ptr_gp0);
  a.vphaddw(xmm0, xmm1, xmm2);
  a.vphaddw(xmm0, xmm1, ptr_gp0);
  a.vphminposuw(xmm0, xmm1);
  a.vphminposuw(xmm0, ptr_gp0);
  a.vphsubd(xmm0, xmm1, xmm2);
  a.vphsubd(xmm0, xmm1, ptr_gp0);
  a.vphsubsw(xmm0, xmm1, xmm2);
  a.vphsubsw(xmm0, xmm1, ptr_gp0);
  a.vphsubw(xmm0, xmm1, xmm2);
  a.vphsubw(xmm0, xmm1, ptr_gp0);
  a.vpinsrb(xmm0, xmm1, gp0, 0);
  a.vpinsrb(xmm0, xmm1, ptr_gp0, 0);
  a.vpinsrd(xmm0, xmm1, gp0, 0);
  a.vpinsrd(xmm0, xmm1, ptr_gp0, 0);
  a.vpinsrw(xmm0, xmm1, gp0, 0);
  a.vpinsrw(xmm0, xmm1, ptr_gp0, 0);
  a.vpmaddubsw(xmm0, xmm1, xmm2);
  a.vpmaddubsw(xmm0, xmm1, ptr_gp0);
  a.vpmaddwd(xmm0, xmm1, xmm2);
  a.vpmaddwd(xmm0, xmm1, ptr_gp0);
  a.vpmaxsb(xmm0, xmm1, xmm2);
  a.vpmaxsb(xmm0, xmm1, ptr_gp0);
  a.vpmaxsd(xmm0, xmm1, xmm2);
  a.vpmaxsd(xmm0, xmm1, ptr_gp0);
  a.vpmaxsw(xmm0, xmm1, xmm2);
  a.vpmaxsw(xmm0, xmm1, ptr_gp0);
  a.vpmaxub(xmm0, xmm1, xmm2);
  a.vpmaxub(xmm0, xmm1, ptr_gp0);
  a.vpmaxud(xmm0, xmm1, xmm2);
  a.vpmaxud(xmm0, xmm1, ptr_gp0);
  a.vpmaxuw(xmm0, xmm1, xmm2);
  a.vpmaxuw(xmm0, xmm1, ptr_gp0);
  a.vpminsb(xmm0, xmm1, xmm2);
  a.vpminsb(xmm0, xmm1, ptr_gp0);
  a.vpminsd(xmm0, xmm1, xmm2);
  a.vpminsd(xmm0, xmm1, ptr_gp0);
  a.vpminsw(xmm0, xmm1, xmm2);
  a.vpminsw(xmm0, xmm1, ptr_gp0);
  a.vpminub(xmm0, xmm1, xmm2);
  a.vpminub(xmm0, xmm1, ptr_gp0);
  a.vpminud(xmm0, xmm1, xmm2);
  a.vpminud(xmm0, xmm1, ptr_gp0);
  a.vpminuw(xmm0, xmm1, xmm2);
  a.vpminuw(xmm0, xmm1, ptr_gp0);
  a.vpmovmskb(gp0, xmm1);
  a.vpmovsxbd(xmm0, xmm1);
  a.vpmovsxbd(xmm0, ptr_gp0);
  a.vpmovsxbq(xmm0, xmm1);
  a.vpmovsxbq(xmm0, ptr_gp0);
  a.vpmovsxbw(xmm0, xmm1);
  a.vpmovsxbw(xmm0, ptr_gp0);
  a.vpmovsxdq(xmm0, xmm1);
  a.vpmovsxdq(xmm0, ptr_gp0);
  a.vpmovsxwd(xmm0, xmm1);
  a.vpmovsxwd(xmm0, ptr_gp0);
  a.vpmovsxwq(xmm0, xmm1);
  a.vpmovsxwq(xmm0, ptr_gp0);
  a.vpmovzxbd(xmm0, xmm1);
  a.vpmovzxbd(xmm0, ptr_gp0);
  a.vpmovzxbq(xmm0, xmm1);
  a.vpmovzxbq(xmm0, ptr_gp0);
  a.vpmovzxbw(xmm0, xmm1);
  a.vpmovzxbw(xmm0, ptr_gp0);
  a.vpmovzxdq(xmm0, xmm1);
  a.vpmovzxdq(xmm0, ptr_gp0);
  a.vpmovzxwd(xmm0, xmm1);
  a.vpmovzxwd(xmm0, ptr_gp0);
  a.vpmovzxwq(xmm0, xmm1);
  a.vpmovzxwq(xmm0, ptr_gp0);
  a.vpmuldq(xmm0, xmm1, xmm2);
  a.vpmuldq(xmm0, xmm1, ptr_gp0);
  a.vpmulhrsw(xmm0, xmm1, xmm2);
  a.vpmulhrsw(xmm0, xmm1, ptr_gp0);
  a.vpmulhuw(xmm0, xmm1, xmm2);
  a.vpmulhuw(xmm0, xmm1, ptr_gp0);
  a.vpmulhw(xmm0, xmm1, xmm2);
  a.vpmulhw(xmm0, xmm1, ptr_gp0);
  a.vpmulld(xmm0, xmm1, xmm2);
  a.vpmulld(xmm0, xmm1, ptr_gp0);
  a.vpmullw(xmm0, xmm1, xmm2);
  a.vpmullw(xmm0, xmm1, ptr_gp0);
  a.vpmuludq(xmm0, xmm1, xmm2);
  a.vpmuludq(xmm0, xmm1, ptr_gp0);
  a.vpor(xmm0, xmm1, xmm2);
  a.vpor(xmm0, xmm1, ptr_gp0);
  a.vpsadbw(xmm0, xmm1, xmm2);
  a.vpsadbw(xmm0, xmm1, ptr_gp0);
  a.vpshufb(xmm0, xmm1, xmm2);
  a.vpshufb(xmm0, xmm1, ptr_gp0);
  a.vpshufd(xmm0, xmm1, 0);
  a.vpshufd(xmm0, ptr_gp0, 0);
  a.vpshufhw(xmm0, xmm1, 0);
  a.vpshufhw(xmm0, ptr_gp0, 0);
  a.vpshuflw(xmm0, xmm1, 0);
  a.vpshuflw(xmm0, ptr_gp0, 0);
  a.vpsignb(xmm0, xmm1, xmm2);
  a.vpsignb(xmm0, xmm1, ptr_gp0);
  a.vpsignd(xmm0, xmm1, xmm2);
  a.vpsignd(xmm0, xmm1, ptr_gp0);
  a.vpsignw(xmm0, xmm1, xmm2);
  a.vpsignw(xmm0, xmm1, ptr_gp0);
  a.vpslld(xmm0, xmm1, xmm2);
  a.vpslld(xmm0, xmm1, ptr_gp0);
  a.vpslld(xmm0, xmm1, 0);
  a.vpslldq(xmm0, xmm1, 0);
  a.vpsllq(xmm0, xmm1, xmm2);
  a.vpsllq(xmm0, xmm1, ptr_gp0);
  a.vpsllq(xmm0, xmm1, 0);
  a.vpsllw(xmm0, xmm1, xmm2);
  a.vpsllw(xmm0, xmm1, ptr_gp0);
  a.vpsllw(xmm0, xmm1, 0);
  a.vpsrad(xmm0, xmm1, xmm2);
  a.vpsrad(xmm0, xmm1, ptr_gp0);
  a.vpsrad(xmm0, xmm1, 0);
  a.vpsraw(xmm0, xmm1, xmm2);
  a.vpsraw(xmm0, xmm1, ptr_gp0);
  a.vpsraw(xmm0, xmm1, 0);
  a.vpsrld(xmm0, xmm1, xmm2);
  a.vpsrld(xmm0, xmm1, ptr_gp0);
  a.vpsrld(xmm0, xmm1, 0);
  a.vpsrldq(xmm0, xmm1, 0);
  a.vpsrlq(xmm0, xmm1, xmm2);
  a.vpsrlq(xmm0, xmm1, ptr_gp0);
  a.vpsrlq(xmm0, xmm1, 0);
  a.vpsrlw(xmm0, xmm1, xmm2);
  a.vpsrlw(xmm0, xmm1, ptr_gp0);
  a.vpsrlw(xmm0, xmm1, 0);
  a.vpsubb(xmm0, xmm1, xmm2);
  a.vpsubb(xmm0, xmm1, ptr_gp0);
  a.vpsubd(xmm0, xmm1, xmm2);
  a.vpsubd(xmm0, xmm1, ptr_gp0);
  a.vpsubq(xmm0, xmm1, xmm2);
  a.vpsubq(xmm0, xmm1, ptr_gp0);
  a.vpsubw(xmm0, xmm1, xmm2);
  a.vpsubw(xmm0, xmm1, ptr_gp0);
  a.vpsubsb(xmm0, xmm1, xmm2);
  a.vpsubsb(xmm0, xmm1, ptr_gp0);
  a.vpsubsw(xmm0, xmm1, xmm2);
  a.vpsubsw(xmm0, xmm1, ptr_gp0);
  a.vpsubusb(xmm0, xmm1, xmm2);
  a.vpsubusb(xmm0, xmm1, ptr_gp0);
  a.vpsubusw(xmm0, xmm1, xmm2);
  a.vpsubusw(xmm0, xmm1, ptr_gp0);
  a.vptest(xmm0, xmm1);
  a.vptest(xmm0, ptr_gp0);
  a.vptest(ymm0, ymm1);
  a.vptest(ymm0, ptr_gp0);
  a.vpunpckhbw(xmm0, xmm1, xmm2);
  a.vpunpckhbw(xmm0, xmm1, ptr_gp0);
  a.vpunpckhdq(xmm0, xmm1, xmm2);
  a.vpunpckhdq(xmm0, xmm1, ptr_gp0);
  a.vpunpckhqdq(xmm0, xmm1, xmm2);
  a.vpunpckhqdq(xmm0, xmm1, ptr_gp0);
  a.vpunpckhwd(xmm0, xmm1, xmm2);
  a.vpunpckhwd(xmm0, xmm1, ptr_gp0);
  a.vpunpcklbw(xmm0, xmm1, xmm2);
  a.vpunpcklbw(xmm0, xmm1, ptr_gp0);
  a.vpunpckldq(xmm0, xmm1, xmm2);
  a.vpunpckldq(xmm0, xmm1, ptr_gp0);
  a.vpunpcklqdq(xmm0, xmm1, xmm2);
  a.vpunpcklqdq(xmm0, xmm1, ptr_gp0);
  a.vpunpcklwd(xmm0, xmm1, xmm2);
  a.vpunpcklwd(xmm0, xmm1, ptr_gp0);
  a.vpxor(xmm0, xmm1, xmm2);
  a.vpxor(xmm0, xmm1, ptr_gp0);
  a.vrcpps(xmm0, xmm1);
  a.vrcpps(xmm0, ptr_gp0);
  a.vrcpps(ymm0, ymm1);
  a.vrcpps(ymm0, ptr_gp0);
  a.vrcpss(xmm0, xmm1, xmm2);
  a.vrcpss(xmm0, xmm1, ptr_gp0);
  a.vrsqrtps(xmm0, xmm1);
  a.vrsqrtps(xmm0, ptr_gp0);
  a.vrsqrtps(ymm0, ymm1);
  a.vrsqrtps(ymm0, ptr_gp0);
  a.vrsqrtss(xmm0, xmm1, xmm2);
  a.vrsqrtss(xmm0, xmm1, ptr_gp0);
  a.vroundpd(xmm0, xmm1, 0);
  a.vroundpd(xmm0, ptr_gp0, 0);
  a.vroundpd(ymm0, ymm1, 0);
  a.vroundpd(ymm0, ptr_gp0, 0);
  a.vroundps(xmm0, xmm1, 0);
  a.vroundps(xmm0, ptr_gp0, 0);
  a.vroundps(ymm0, ymm1, 0);
  a.vroundps(ymm0, ptr_gp0, 0);
  a.vroundsd(xmm0, xmm1, xmm2, 0);
  a.vroundsd(xmm0, xmm1, ptr_gp0, 0);
  a.vroundss(xmm0, xmm1, xmm2, 0);
  a.vroundss(xmm0, xmm1, ptr_gp0, 0);
  a.vshufpd(xmm0, xmm1, xmm2, 0);
  a.vshufpd(xmm0, xmm1, ptr_gp0, 0);
  a.vshufpd(ymm0, ymm1, ymm2, 0);
  a.vshufpd(ymm0, ymm1, ptr_gp0, 0);
  a.vshufps(xmm0, xmm1, xmm2, 0);
  a.vshufps(xmm0, xmm1, ptr_gp0, 0);
  a.vshufps(ymm0, ymm1, ymm2, 0);
  a.vshufps(ymm0, ymm1, ptr_gp0, 0);
  a.vsqrtpd(xmm0, xmm1);
  a.vsqrtpd(xmm0, ptr_gp0);
  a.vsqrtpd(ymm0, ymm1);
  a.vsqrtpd(ymm0, ptr_gp0);
  a.vsqrtps(xmm0, xmm1);
  a.vsqrtps(xmm0, ptr_gp0);
  a.vsqrtps(ymm0, ymm1);
  a.vsqrtps(ymm0, ptr_gp0);
  a.vsqrtsd(xmm0, xmm1, xmm2);
  a.vsqrtsd(xmm0, xmm1, ptr_gp0);
  a.vsqrtss(xmm0, xmm1, xmm2);
  a.vsqrtss(xmm0, xmm1, ptr_gp0);
  a.vstmxcsr(ptr_gp0);
  a.vsubpd(xmm0, xmm1, xmm2);
  a.vsubpd(xmm0, xmm1, ptr_gp0);
  a.vsubpd(ymm0, ymm1, ymm2);
  a.vsubpd(ymm0, ymm1, ptr_gp0);
  a.vsubps(xmm0, xmm1, xmm2);
  a.vsubps(xmm0, xmm1, ptr_gp0);
  a.vsubps(ymm0, ymm1, ymm2);
  a.vsubps(ymm0, ymm1, ptr_gp0);
  a.vsubsd(xmm0, xmm1, xmm2);
  a.vsubsd(xmm0, xmm1, ptr_gp0);
  a.vsubss(xmm0, xmm1, xmm2);
  a.vsubss(xmm0, xmm1, ptr_gp0);
  a.vtestps(xmm0, xmm1);
  a.vtestps(xmm0, ptr_gp0);
  a.vtestps(ymm0, ymm1);
  a.vtestps(ymm0, ptr_gp0);
  a.vtestpd(xmm0, xmm1);
  a.vtestpd(xmm0, ptr_gp0);
  a.vtestpd(ymm0, ymm1);
  a.vtestpd(ymm0, ptr_gp0);
  a.vucomisd(xmm0, xmm1);
  a.vucomisd(xmm0, ptr_gp0);
  a.vucomiss(xmm0, xmm1);
  a.vucomiss(xmm0, ptr_gp0);
  a.vunpckhpd(xmm0, xmm1, xmm2);
  a.vunpckhpd(xmm0, xmm1, ptr_gp0);
  a.vunpckhpd(ymm0, ymm1, ymm2);
  a.vunpckhpd(ymm0, ymm1, ptr_gp0);
  a.vunpckhps(xmm0, xmm1, xmm2);
  a.vunpckhps(xmm0, xmm1, ptr_gp0);
  a.vunpckhps(ymm0, ymm1, ymm2);
  a.vunpckhps(ymm0, ymm1, ptr_gp0);
  a.vunpcklpd(xmm0, xmm1, xmm2);
  a.vunpcklpd(xmm0, xmm1, ptr_gp0);
  a.vunpcklpd(ymm0, ymm1, ymm2);
  a.vunpcklpd(ymm0, ymm1, ptr_gp0);
  a.vunpcklps(xmm0, xmm1, xmm2);
  a.vunpcklps(xmm0, xmm1, ptr_gp0);
  a.vunpcklps(ymm0, ymm1, ymm2);
  a.vunpcklps(ymm0, ymm1, ptr_gp0);
  a.vxorpd(xmm0, xmm1, xmm2);
  a.vxorpd(ymm0, ymm1, ymm2);
  a.vxorps(xmm0, xmm1, xmm2);
  a.vxorps(ymm0, ymm1, ymm2);
  a.vzeroall();
  a.vzeroupper();

  // AVX+AESNI.
  a.nop();

  a.vaesdec(xmm0, xmm1, xmm2);
  a.vaesdec(xmm0, xmm1, ptr_gp0);
  a.vaesdeclast(xmm0, xmm1, xmm2);
  a.vaesdeclast(xmm0, xmm1, ptr_gp0);
  a.vaesenc(xmm0, xmm1, xmm2);
  a.vaesenc(xmm0, xmm1, ptr_gp0);
  a.vaesenclast(xmm0, xmm1, xmm2);
  a.vaesenclast(xmm0, xmm1, ptr_gp0);
  a.vaesimc(xmm0, xmm1);
  a.vaesimc(xmm0, ptr_gp0);
  a.vaeskeygenassist(xmm0, xmm1, 0);
  a.vaeskeygenassist(xmm0, ptr_gp0, 0);

  // AVX+PCLMULQDQ.
  a.nop();

  a.vpclmulqdq(xmm0, xmm1, xmm2, 0);
  a.vpclmulqdq(xmm0, xmm1, ptr_gp0, 0);

  // AVX2.
  a.nop();

  a.vbroadcasti128(ymm0, ptr_gp0);
  a.vbroadcastsd(ymm0, xmm1);
  a.vbroadcastss(xmm0, xmm1);
  a.vbroadcastss(ymm0, xmm1);
  a.vextracti128(xmm0, ymm1, 0);
  a.vextracti128(ptr_gp0, ymm1, 0);
  a.vgatherdpd(xmm0, vm32x, xmm2);
  a.vgatherdpd(ymm0, vm32y, ymm2);
  a.vgatherdps(xmm0, vm32x, xmm2);
  a.vgatherdps(ymm0, vm32y, ymm2);
  a.vgatherqpd(xmm0, vm32x, xmm2);
  a.vgatherqpd(ymm0, vm32y, ymm2);
  a.vgatherqps(xmm0, vm32x, xmm2);
  a.vgatherqps(xmm0, vm32y, xmm2);
  a.vinserti128(ymm0, ymm1, xmm2, 0);
  a.vinserti128(ymm0, ymm1, ptr_gp0, 0);
  a.vmovntdqa(ymm0, ptr_gp0);
  a.vmpsadbw(ymm0, ymm1, ymm2, 0);
  a.vmpsadbw(ymm0, ymm1, ptr_gp0, 0);
  a.vpabsb(ymm0, ymm1);
  a.vpabsb(ymm0, ptr_gp0);
  a.vpabsd(ymm0, ymm1);
  a.vpabsd(ymm0, ptr_gp0);
  a.vpabsw(ymm0, ymm1);
  a.vpabsw(ymm0, ptr_gp0);
  a.vpackssdw(ymm0, ymm1, ymm2);
  a.vpackssdw(ymm0, ymm1, ptr_gp0);
  a.vpacksswb(ymm0, ymm1, ymm2);
  a.vpacksswb(ymm0, ymm1, ptr_gp0);
  a.vpackusdw(ymm0, ymm1, ymm2);
  a.vpackusdw(ymm0, ymm1, ptr_gp0);
  a.vpackuswb(ymm0, ymm1, ymm2);
  a.vpackuswb(ymm0, ymm1, ptr_gp0);
  a.vpaddb(ymm0, ymm1, ymm2);
  a.vpaddb(ymm0, ymm1, ptr_gp0);
  a.vpaddd(ymm0, ymm1, ymm2);
  a.vpaddd(ymm0, ymm1, ptr_gp0);
  a.vpaddq(ymm0, ymm1, ymm2);
  a.vpaddq(ymm0, ymm1, ptr_gp0);
  a.vpaddw(ymm0, ymm1, ymm2);
  a.vpaddw(ymm0, ymm1, ptr_gp0);
  a.vpaddsb(ymm0, ymm1, ymm2);
  a.vpaddsb(ymm0, ymm1, ptr_gp0);
  a.vpaddsw(ymm0, ymm1, ymm2);
  a.vpaddsw(ymm0, ymm1, ptr_gp0);
  a.vpaddusb(ymm0, ymm1, ymm2);
  a.vpaddusb(ymm0, ymm1, ptr_gp0);
  a.vpaddusw(ymm0, ymm1, ymm2);
  a.vpaddusw(ymm0, ymm1, ptr_gp0);
  a.vpalignr(ymm0, ymm1, ymm2, 0);
  a.vpalignr(ymm0, ymm1, ptr_gp0, 0);
  a.vpand(ymm0, ymm1, ymm2);
  a.vpand(ymm0, ymm1, ptr_gp0);
  a.vpandn(ymm0, ymm1, ymm2);
  a.vpandn(ymm0, ymm1, ptr_gp0);
  a.vpavgb(ymm0, ymm1, ymm2);
  a.vpavgb(ymm0, ymm1, ptr_gp0);
  a.vpavgw(ymm0, ymm1, ymm2);
  a.vpavgw(ymm0, ymm1, ptr_gp0);
  a.vpblendd(xmm0, xmm1, xmm2, 0);
  a.vpblendd(xmm0, xmm1, ptr_gp0, 0);
  a.vpblendd(ymm0, ymm1, ymm2, 0);
  a.vpblendd(ymm0, ymm1, ptr_gp0, 0);
  a.vpblendvb(ymm0, ymm1, ymm2, ymm3);
  a.vpblendvb(ymm0, ymm1, ptr_gp0, ymm3);
  a.vpblendw(ymm0, ymm1, ymm2, 0);
  a.vpblendw(ymm0, ymm1, ptr_gp0, 0);
  a.vpbroadcastb(xmm0, xmm1);
  a.vpbroadcastb(xmm0, ptr_gp0);
  a.vpbroadcastb(ymm0, xmm1);
  a.vpbroadcastb(ymm0, ptr_gp0);
  a.vpbroadcastd(xmm0, xmm1);
  a.vpbroadcastd(xmm0, ptr_gp0);
  a.vpbroadcastd(ymm0, xmm1);
  a.vpbroadcastd(ymm0, ptr_gp0);
  a.vpbroadcastq(xmm0, xmm1);
  a.vpbroadcastq(xmm0, ptr_gp0);
  a.vpbroadcastq(ymm0, xmm1);
  a.vpbroadcastq(ymm0, ptr_gp0);
  a.vpbroadcastw(xmm0, xmm1);
  a.vpbroadcastw(xmm0, ptr_gp0);
  a.vpbroadcastw(ymm0, xmm1);
  a.vpbroadcastw(ymm0, ptr_gp0);
  a.vpcmpeqb(ymm0, ymm1, ymm2);
  a.vpcmpeqb(ymm0, ymm1, ptr_gp0);
  a.vpcmpeqd(ymm0, ymm1, ymm2);
  a.vpcmpeqd(ymm0, ymm1, ptr_gp0);
  a.vpcmpeqq(ymm0, ymm1, ymm2);
  a.vpcmpeqq(ymm0, ymm1, ptr_gp0);
  a.vpcmpeqw(ymm0, ymm1, ymm2);
  a.vpcmpeqw(ymm0, ymm1, ptr_gp0);
  a.vpcmpgtb(ymm0, ymm1, ymm2);
  a.vpcmpgtb(ymm0, ymm1, ptr_gp0);
  a.vpcmpgtd(ymm0, ymm1, ymm2);
  a.vpcmpgtd(ymm0, ymm1, ptr_gp0);
  a.vpcmpgtq(ymm0, ymm1, ymm2);
  a.vpcmpgtq(ymm0, ymm1, ptr_gp0);
  a.vpcmpgtw(ymm0, ymm1, ymm2);
  a.vpcmpgtw(ymm0, ymm1, ptr_gp0);
  a.vperm2i128(ymm0, ymm1, ymm2, 0);
  a.vperm2i128(ymm0, ymm1, ptr_gp0, 0);
  a.vpermd(ymm0, ymm1, ymm2);
  a.vpermd(ymm0, ymm1, ptr_gp0);
  a.vpermps(ymm0, ymm1, ymm2);
  a.vpermps(ymm0, ymm1, ptr_gp0);
  a.vpermpd(ymm0, ymm1, 0);
  a.vpermpd(ymm0, ptr_gp0, 0);
  a.vpermq(ymm0, ymm1, 0);
  a.vpermq(ymm0, ptr_gp0, 0);
  a.vpgatherdd(xmm0, vm32x, xmm2);
  a.vpgatherdd(ymm0, vm32y, ymm2);
  a.vpgatherdq(xmm0, vm32x, xmm2);
  a.vpgatherdq(ymm0, vm32y, ymm2);
  a.vpgatherqd(xmm0, vm32x, xmm2);
  a.vpgatherqd(xmm0, vm32y, xmm2);
  a.vpgatherqq(xmm0, vm32x, xmm2);
  a.vpgatherqq(ymm0, vm32y, ymm2);
  a.vpmovmskb(gp0, ymm1);
  a.vpmovsxbd(ymm0, ptr_gp0);
  a.vpmovsxbd(ymm0, xmm1);
  a.vpmovsxbq(ymm0, ptr_gp0);
  a.vpmovsxbq(ymm0, xmm1);
  a.vpmovsxbw(ymm0, ptr_gp0);
  a.vpmovsxbw(ymm0, xmm1);
  a.vpmovsxdq(ymm0, ptr_gp0);
  a.vpmovsxdq(ymm0, xmm1);
  a.vpmovsxwd(ymm0, ptr_gp0);
  a.vpmovsxwd(ymm0, xmm1);
  a.vpmovsxwq(ymm0, ptr_gp0);
  a.vpmovsxwq(ymm0, xmm1);
  a.vpmovzxbd(ymm0, ptr_gp0);
  a.vpmovzxbd(ymm0, xmm1);
  a.vpmovzxbq(ymm0, ptr_gp0);
  a.vpmovzxbq(ymm0, xmm1);
  a.vpmovzxbw(ymm0, ptr_gp0);
  a.vpmovzxbw(ymm0, xmm1);
  a.vpmovzxdq(ymm0, ptr_gp0);
  a.vpmovzxdq(ymm0, xmm1);
  a.vpmovzxwd(ymm0, ptr_gp0);
  a.vpmovzxwd(ymm0, xmm1);
  a.vpmovzxwq(ymm0, ptr_gp0);
  a.vpmovzxwq(ymm0, xmm1);
  a.vpshufd(ymm0, ptr_gp0, 0);
  a.vpshufd(ymm0, ymm1, 0);
  a.vpshufhw(ymm0, ptr_gp0, 0);
  a.vpshufhw(ymm0, ymm1, 0);
  a.vpshuflw(ymm0, ptr_gp0, 0);
  a.vpshuflw(ymm0, ymm1, 0);
  a.vpslld(ymm0, ymm1, 0);
  a.vpslldq(ymm0, ymm1, 0);
  a.vpsllq(ymm0, ymm1, 0);
  a.vpsllw(ymm0, ymm1, 0);
  a.vpsrad(ymm0, ymm1, 0);
  a.vpsraw(ymm0, ymm1, 0);
  a.vpsrld(ymm0, ymm1, 0);
  a.vpsrldq(ymm0, ymm1, 0);
  a.vpsrlq(ymm0, ymm1, 0);
  a.vpsrlw(ymm0, ymm1, 0);
  a.vphaddd(ymm0, ymm1, ptr_gp0);
  a.vphaddd(ymm0, ymm1, ymm2);
  a.vphaddsw(ymm0, ymm1, ptr_gp0);
  a.vphaddsw(ymm0, ymm1, ymm2);
  a.vphaddw(ymm0, ymm1, ptr_gp0);
  a.vphaddw(ymm0, ymm1, ymm2);
  a.vphsubd(ymm0, ymm1, ptr_gp0);
  a.vphsubd(ymm0, ymm1, ymm2);
  a.vphsubsw(ymm0, ymm1, ptr_gp0);
  a.vphsubsw(ymm0, ymm1, ymm2);
  a.vphsubw(ymm0, ymm1, ptr_gp0);
  a.vphsubw(ymm0, ymm1, ymm2);
  a.vpmaddubsw(ymm0, ymm1, ptr_gp0);
  a.vpmaddubsw(ymm0, ymm1, ymm2);
  a.vpmaddwd(ymm0, ymm1, ptr_gp0);
  a.vpmaddwd(ymm0, ymm1, ymm2);
  a.vpmaskmovd(ptr_gp0, xmm1, xmm2);
  a.vpmaskmovd(ptr_gp0, ymm1, ymm2);
  a.vpmaskmovd(xmm0, xmm1, ptr_gp0);
  a.vpmaskmovd(ymm0, ymm1, ptr_gp0);
  a.vpmaskmovq(ptr_gp0, xmm1, xmm2);
  a.vpmaskmovq(ptr_gp0, ymm1, ymm2);
  a.vpmaskmovq(xmm0, xmm1, ptr_gp0);
  a.vpmaskmovq(ymm0, ymm1, ptr_gp0);
  a.vpmaxsb(ymm0, ymm1, ptr_gp0);
  a.vpmaxsb(ymm0, ymm1, ymm2);
  a.vpmaxsd(ymm0, ymm1, ptr_gp0);
  a.vpmaxsd(ymm0, ymm1, ymm2);
  a.vpmaxsw(ymm0, ymm1, ptr_gp0);
  a.vpmaxsw(ymm0, ymm1, ymm2);
  a.vpmaxub(ymm0, ymm1, ptr_gp0);
  a.vpmaxub(ymm0, ymm1, ymm2);
  a.vpmaxud(ymm0, ymm1, ptr_gp0);
  a.vpmaxud(ymm0, ymm1, ymm2);
  a.vpmaxuw(ymm0, ymm1, ptr_gp0);
  a.vpmaxuw(ymm0, ymm1, ymm2);
  a.vpminsb(ymm0, ymm1, ptr_gp0);
  a.vpminsb(ymm0, ymm1, ymm2);
  a.vpminsd(ymm0, ymm1, ptr_gp0);
  a.vpminsd(ymm0, ymm1, ymm2);
  a.vpminsw(ymm0, ymm1, ptr_gp0);
  a.vpminsw(ymm0, ymm1, ymm2);
  a.vpminub(ymm0, ymm1, ptr_gp0);
  a.vpminub(ymm0, ymm1, ymm2);
  a.vpminud(ymm0, ymm1, ptr_gp0);
  a.vpminud(ymm0, ymm1, ymm2);
  a.vpminuw(ymm0, ymm1, ptr_gp0);
  a.vpminuw(ymm0, ymm1, ymm2);
  a.vpmuldq(ymm0, ymm1, ptr_gp0);
  a.vpmuldq(ymm0, ymm1, ymm2);
  a.vpmulhrsw(ymm0, ymm1, ptr_gp0);
  a.vpmulhrsw(ymm0, ymm1, ymm2);
  a.vpmulhuw(ymm0, ymm1, ptr_gp0);
  a.vpmulhuw(ymm0, ymm1, ymm2);
  a.vpmulhw(ymm0, ymm1, ptr_gp0);
  a.vpmulhw(ymm0, ymm1, ymm2);
  a.vpmulld(ymm0, ymm1, ptr_gp0);
  a.vpmulld(ymm0, ymm1, ymm2);
  a.vpmullw(ymm0, ymm1, ptr_gp0);
  a.vpmullw(ymm0, ymm1, ymm2);
  a.vpmuludq(ymm0, ymm1, ptr_gp0);
  a.vpmuludq(ymm0, ymm1, ymm2);
  a.vpor(ymm0, ymm1, ptr_gp0);
  a.vpor(ymm0, ymm1, ymm2);
  a.vpsadbw(ymm0, ymm1, ptr_gp0);
  a.vpsadbw(ymm0, ymm1, ymm2);
  a.vpshufb(ymm0, ymm1, ptr_gp0);
  a.vpshufb(ymm0, ymm1, ymm2);
  a.vpsignb(ymm0, ymm1, ptr_gp0);
  a.vpsignb(ymm0, ymm1, ymm2);
  a.vpsignd(ymm0, ymm1, ptr_gp0);
  a.vpsignd(ymm0, ymm1, ymm2);
  a.vpsignw(ymm0, ymm1, ptr_gp0);
  a.vpsignw(ymm0, ymm1, ymm2);
  a.vpslld(ymm0, ymm1, ptr_gp0);
  a.vpslld(ymm0, ymm1, xmm2);
  a.vpsllq(ymm0, ymm1, ptr_gp0);
  a.vpsllq(ymm0, ymm1, xmm2);
  a.vpsllvd(xmm0, xmm1, ptr_gp0);
  a.vpsllvd(xmm0, xmm1, xmm2);
  a.vpsllvd(ymm0, ymm1, ptr_gp0);
  a.vpsllvd(ymm0, ymm1, ymm2);
  a.vpsllvq(xmm0, xmm1, ptr_gp0);
  a.vpsllvq(xmm0, xmm1, xmm2);
  a.vpsllvq(ymm0, ymm1, ptr_gp0);
  a.vpsllvq(ymm0, ymm1, ymm2);
  a.vpsllw(ymm0, ymm1, ptr_gp0);
  a.vpsllw(ymm0, ymm1, xmm2);
  a.vpsrad(ymm0, ymm1, ptr_gp0);
  a.vpsrad(ymm0, ymm1, xmm2);
  a.vpsravd(xmm0, xmm1, ptr_gp0);
  a.vpsravd(xmm0, xmm1, xmm2);
  a.vpsravd(ymm0, ymm1, ptr_gp0);
  a.vpsravd(ymm0, ymm1, ymm2);
  a.vpsraw(ymm0, ymm1, ptr_gp0);
  a.vpsraw(ymm0, ymm1, xmm2);
  a.vpsrld(ymm0, ymm1, ptr_gp0);
  a.vpsrld(ymm0, ymm1, xmm2);
  a.vpsrlq(ymm0, ymm1, ptr_gp0);
  a.vpsrlq(ymm0, ymm1, xmm2);
  a.vpsrlvd(xmm0, xmm1, ptr_gp0);
  a.vpsrlvd(xmm0, xmm1, xmm2);
  a.vpsrlvd(ymm0, ymm1, ptr_gp0);
  a.vpsrlvd(ymm0, ymm1, ymm2);
  a.vpsrlvq(xmm0, xmm1, ptr_gp0);
  a.vpsrlvq(xmm0, xmm1, xmm2);
  a.vpsrlvq(ymm0, ymm1, ptr_gp0);
  a.vpsrlvq(ymm0, ymm1, ymm2);
  a.vpsrlw(ymm0, ymm1, ptr_gp0);
  a.vpsrlw(ymm0, ymm1, xmm2);
  a.vpsubb(ymm0, ymm1, ptr_gp0);
  a.vpsubb(ymm0, ymm1, ymm2);
  a.vpsubd(ymm0, ymm1, ptr_gp0);
  a.vpsubd(ymm0, ymm1, ymm2);
  a.vpsubq(ymm0, ymm1, ptr_gp0);
  a.vpsubq(ymm0, ymm1, ymm2);
  a.vpsubsb(ymm0, ymm1, ptr_gp0);
  a.vpsubsb(ymm0, ymm1, ymm2);
  a.vpsubsw(ymm0, ymm1, ptr_gp0);
  a.vpsubsw(ymm0, ymm1, ymm2);
  a.vpsubusb(ymm0, ymm1, ptr_gp0);
  a.vpsubusb(ymm0, ymm1, ymm2);
  a.vpsubusw(ymm0, ymm1, ptr_gp0);
  a.vpsubusw(ymm0, ymm1, ymm2);
  a.vpsubw(ymm0, ymm1, ptr_gp0);
  a.vpsubw(ymm0, ymm1, ymm2);
  a.vpunpckhbw(ymm0, ymm1, ptr_gp0);
  a.vpunpckhbw(ymm0, ymm1, ymm2);
  a.vpunpckhdq(ymm0, ymm1, ptr_gp0);
  a.vpunpckhdq(ymm0, ymm1, ymm2);
  a.vpunpckhqdq(ymm0, ymm1, ptr_gp0);
  a.vpunpckhqdq(ymm0, ymm1, ymm2);
  a.vpunpckhwd(ymm0, ymm1, ptr_gp0);
  a.vpunpckhwd(ymm0, ymm1, ymm2);
  a.vpunpcklbw(ymm0, ymm1, ptr_gp0);
  a.vpunpcklbw(ymm0, ymm1, ymm2);
  a.vpunpckldq(ymm0, ymm1, ptr_gp0);
  a.vpunpckldq(ymm0, ymm1, ymm2);
  a.vpunpcklqdq(ymm0, ymm1, ptr_gp0);
  a.vpunpcklqdq(ymm0, ymm1, ymm2);
  a.vpunpcklwd(ymm0, ymm1, ptr_gp0);
  a.vpunpcklwd(ymm0, ymm1, ymm2);
  a.vpxor(ymm0, ymm1, ptr_gp0);
  a.vpxor(ymm0, ymm1, ymm2);

  // FMA3.
  a.nop();

  a.vfmadd132pd(xmm0, xmm1, ptr_gp0);
  a.vfmadd132pd(xmm0, xmm1, xmm2);
  a.vfmadd132pd(ymm0, ymm1, ptr_gp0);
  a.vfmadd132pd(ymm0, ymm1, ymm2);
  a.vfmadd132ps(xmm0, xmm1, ptr_gp0);
  a.vfmadd132ps(xmm0, xmm1, xmm2);
  a.vfmadd132ps(ymm0, ymm1, ptr_gp0);
  a.vfmadd132ps(ymm0, ymm1, ymm2);
  a.vfmadd132sd(xmm0, xmm1, ptr_gp0);
  a.vfmadd132sd(xmm0, xmm1, xmm2);
  a.vfmadd132ss(xmm0, xmm1, ptr_gp0);
  a.vfmadd132ss(xmm0, xmm1, xmm2);
  a.vfmadd213pd(xmm0, xmm1, ptr_gp0);
  a.vfmadd213pd(xmm0, xmm1, xmm2);
  a.vfmadd213pd(ymm0, ymm1, ptr_gp0);
  a.vfmadd213pd(ymm0, ymm1, ymm2);
  a.vfmadd213ps(xmm0, xmm1, ptr_gp0);
  a.vfmadd213ps(xmm0, xmm1, xmm2);
  a.vfmadd213ps(ymm0, ymm1, ptr_gp0);
  a.vfmadd213ps(ymm0, ymm1, ymm2);
  a.vfmadd213sd(xmm0, xmm1, ptr_gp0);
  a.vfmadd213sd(xmm0, xmm1, xmm2);
  a.vfmadd213ss(xmm0, xmm1, ptr_gp0);
  a.vfmadd213ss(xmm0, xmm1, xmm2);
  a.vfmadd231pd(xmm0, xmm1, ptr_gp0);
  a.vfmadd231pd(xmm0, xmm1, xmm2);
  a.vfmadd231pd(ymm0, ymm1, ptr_gp0);
  a.vfmadd231pd(ymm0, ymm1, ymm2);
  a.vfmadd231ps(xmm0, xmm1, ptr_gp0);
  a.vfmadd231ps(xmm0, xmm1, xmm2);
  a.vfmadd231ps(ymm0, ymm1, ptr_gp0);
  a.vfmadd231ps(ymm0, ymm1, ymm2);
  a.vfmadd231sd(xmm0, xmm1, ptr_gp0);
  a.vfmadd231sd(xmm0, xmm1, xmm2);
  a.vfmadd231ss(xmm0, xmm1, ptr_gp0);
  a.vfmadd231ss(xmm0, xmm1, xmm2);
  a.vfmaddsub132pd(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub132pd(xmm0, xmm1, xmm2);
  a.vfmaddsub132pd(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub132pd(ymm0, ymm1, ymm2);
  a.vfmaddsub132ps(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub132ps(xmm0, xmm1, xmm2);
  a.vfmaddsub132ps(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub132ps(ymm0, ymm1, ymm2);
  a.vfmaddsub213pd(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub213pd(xmm0, xmm1, xmm2);
  a.vfmaddsub213pd(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub213pd(ymm0, ymm1, ymm2);
  a.vfmaddsub213ps(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub213ps(xmm0, xmm1, xmm2);
  a.vfmaddsub213ps(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub213ps(ymm0, ymm1, ymm2);
  a.vfmaddsub231pd(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub231pd(xmm0, xmm1, xmm2);
  a.vfmaddsub231pd(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub231pd(ymm0, ymm1, ymm2);
  a.vfmaddsub231ps(xmm0, xmm1, ptr_gp0);
  a.vfmaddsub231ps(xmm0, xmm1, xmm2);
  a.vfmaddsub231ps(ymm0, ymm1, ptr_gp0);
  a.vfmaddsub231ps(ymm0, ymm1, ymm2);
  a.vfmsub132pd(xmm0, xmm1, ptr_gp0);
  a.vfmsub132pd(xmm0, xmm1, xmm2);
  a.vfmsub132pd(ymm0, ymm1, ptr_gp0);
  a.vfmsub132pd(ymm0, ymm1, ymm2);
  a.vfmsub132ps(xmm0, xmm1, ptr_gp0);
  a.vfmsub132ps(xmm0, xmm1, xmm2);
  a.vfmsub132ps(ymm0, ymm1, ptr_gp0);
  a.vfmsub132ps(ymm0, ymm1, ymm2);
  a.vfmsub132sd(xmm0, xmm1, ptr_gp0);
  a.vfmsub132sd(xmm0, xmm1, xmm2);
  a.vfmsub132ss(xmm0, xmm1, ptr_gp0);
  a.vfmsub132ss(xmm0, xmm1, xmm2);
  a.vfmsub213pd(xmm0, xmm1, ptr_gp0);
  a.vfmsub213pd(xmm0, xmm1, xmm2);
  a.vfmsub213pd(ymm0, ymm1, ptr_gp0);
  a.vfmsub213pd(ymm0, ymm1, ymm2);
  a.vfmsub213ps(xmm0, xmm1, ptr_gp0);
  a.vfmsub213ps(xmm0, xmm1, xmm2);
  a.vfmsub213ps(ymm0, ymm1, ptr_gp0);
  a.vfmsub213ps(ymm0, ymm1, ymm2);
  a.vfmsub213sd(xmm0, xmm1, ptr_gp0);
  a.vfmsub213sd(xmm0, xmm1, xmm2);
  a.vfmsub213ss(xmm0, xmm1, ptr_gp0);
  a.vfmsub213ss(xmm0, xmm1, xmm2);
  a.vfmsub231pd(xmm0, xmm1, ptr_gp0);
  a.vfmsub231pd(xmm0, xmm1, xmm2);
  a.vfmsub231pd(ymm0, ymm1, ptr_gp0);
  a.vfmsub231pd(ymm0, ymm1, ymm2);
  a.vfmsub231ps(xmm0, xmm1, ptr_gp0);
  a.vfmsub231ps(xmm0, xmm1, xmm2);
  a.vfmsub231ps(ymm0, ymm1, ptr_gp0);
  a.vfmsub231ps(ymm0, ymm1, ymm2);
  a.vfmsub231sd(xmm0, xmm1, ptr_gp0);
  a.vfmsub231sd(xmm0, xmm1, xmm2);
  a.vfmsub231ss(xmm0, xmm1, ptr_gp0);
  a.vfmsub231ss(xmm0, xmm1, xmm2);
  a.vfmsubadd132pd(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd132pd(xmm0, xmm1, xmm2);
  a.vfmsubadd132pd(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd132pd(ymm0, ymm1, ymm2);
  a.vfmsubadd132ps(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd132ps(xmm0, xmm1, xmm2);
  a.vfmsubadd132ps(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd132ps(ymm0, ymm1, ymm2);
  a.vfmsubadd213pd(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd213pd(xmm0, xmm1, xmm2);
  a.vfmsubadd213pd(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd213pd(ymm0, ymm1, ymm2);
  a.vfmsubadd213ps(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd213ps(xmm0, xmm1, xmm2);
  a.vfmsubadd213ps(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd213ps(ymm0, ymm1, ymm2);
  a.vfmsubadd231pd(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd231pd(xmm0, xmm1, xmm2);
  a.vfmsubadd231pd(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd231pd(ymm0, ymm1, ymm2);
  a.vfmsubadd231ps(xmm0, xmm1, ptr_gp0);
  a.vfmsubadd231ps(xmm0, xmm1, xmm2);
  a.vfmsubadd231ps(ymm0, ymm1, ptr_gp0);
  a.vfmsubadd231ps(ymm0, ymm1, ymm2);
  a.vfnmadd132pd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd132pd(xmm0, xmm1, xmm2);
  a.vfnmadd132pd(ymm0, ymm1, ptr_gp0);
  a.vfnmadd132pd(ymm0, ymm1, ymm2);
  a.vfnmadd132ps(xmm0, xmm1, ptr_gp0);
  a.vfnmadd132ps(xmm0, xmm1, xmm2);
  a.vfnmadd132ps(ymm0, ymm1, ptr_gp0);
  a.vfnmadd132ps(ymm0, ymm1, ymm2);
  a.vfnmadd132sd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd132sd(xmm0, xmm1, xmm2);
  a.vfnmadd132ss(xmm0, xmm1, ptr_gp0);
  a.vfnmadd132ss(xmm0, xmm1, xmm2);
  a.vfnmadd213pd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd213pd(xmm0, xmm1, xmm2);
  a.vfnmadd213pd(ymm0, ymm1, ptr_gp0);
  a.vfnmadd213pd(ymm0, ymm1, ymm2);
  a.vfnmadd213ps(xmm0, xmm1, ptr_gp0);
  a.vfnmadd213ps(xmm0, xmm1, xmm2);
  a.vfnmadd213ps(ymm0, ymm1, ptr_gp0);
  a.vfnmadd213ps(ymm0, ymm1, ymm2);
  a.vfnmadd213sd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd213sd(xmm0, xmm1, xmm2);
  a.vfnmadd213ss(xmm0, xmm1, ptr_gp0);
  a.vfnmadd213ss(xmm0, xmm1, xmm2);
  a.vfnmadd231pd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd231pd(xmm0, xmm1, xmm2);
  a.vfnmadd231pd(ymm0, ymm1, ptr_gp0);
  a.vfnmadd231pd(ymm0, ymm1, ymm2);
  a.vfnmadd231ps(xmm0, xmm1, ptr_gp0);
  a.vfnmadd231ps(xmm0, xmm1, xmm2);
  a.vfnmadd231ps(ymm0, ymm1, ptr_gp0);
  a.vfnmadd231ps(ymm0, ymm1, ymm2);
  a.vfnmadd231sd(xmm0, xmm1, ptr_gp0);
  a.vfnmadd231sd(xmm0, xmm1, xmm2);
  a.vfnmadd231ss(xmm0, xmm1, ptr_gp0);
  a.vfnmadd231ss(xmm0, xmm1, xmm2);
  a.vfnmsub132pd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub132pd(xmm0, xmm1, xmm2);
  a.vfnmsub132pd(ymm0, ymm1, ptr_gp0);
  a.vfnmsub132pd(ymm0, ymm1, ymm2);
  a.vfnmsub132ps(xmm0, xmm1, ptr_gp0);
  a.vfnmsub132ps(xmm0, xmm1, xmm2);
  a.vfnmsub132ps(ymm0, ymm1, ptr_gp0);
  a.vfnmsub132ps(ymm0, ymm1, ymm2);
  a.vfnmsub132sd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub132sd(xmm0, xmm1, xmm2);
  a.vfnmsub132ss(xmm0, xmm1, ptr_gp0);
  a.vfnmsub132ss(xmm0, xmm1, xmm2);
  a.vfnmsub213pd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub213pd(xmm0, xmm1, xmm2);
  a.vfnmsub213pd(ymm0, ymm1, ptr_gp0);
  a.vfnmsub213pd(ymm0, ymm1, ymm2);
  a.vfnmsub213ps(xmm0, xmm1, ptr_gp0);
  a.vfnmsub213ps(xmm0, xmm1, xmm2);
  a.vfnmsub213ps(ymm0, ymm1, ptr_gp0);
  a.vfnmsub213ps(ymm0, ymm1, ymm2);
  a.vfnmsub213sd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub213sd(xmm0, xmm1, xmm2);
  a.vfnmsub213ss(xmm0, xmm1, ptr_gp0);
  a.vfnmsub213ss(xmm0, xmm1, xmm2);
  a.vfnmsub231pd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub231pd(xmm0, xmm1, xmm2);
  a.vfnmsub231pd(ymm0, ymm1, ptr_gp0);
  a.vfnmsub231pd(ymm0, ymm1, ymm2);
  a.vfnmsub231ps(xmm0, xmm1, ptr_gp0);
  a.vfnmsub231ps(xmm0, xmm1, xmm2);
  a.vfnmsub231ps(ymm0, ymm1, ptr_gp0);
  a.vfnmsub231ps(ymm0, ymm1, ymm2);
  a.vfnmsub231sd(xmm0, xmm1, ptr_gp0);
  a.vfnmsub231sd(xmm0, xmm1, xmm2);
  a.vfnmsub231ss(xmm0, xmm1, ptr_gp0);
  a.vfnmsub231ss(xmm0, xmm1, xmm2);

  // FMA4.
  a.nop();

  a.vfmaddpd(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddpd(ymm0, ymm1, ymm2, ymm3);
  a.vfmaddpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmaddpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmaddps(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddps(ymm0, ymm1, ymm2, ymm3);
  a.vfmaddps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmaddps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmaddsd(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddsd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddsd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddss(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddss(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddss(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddsubpd(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddsubpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddsubpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddsubpd(ymm0, ymm1, ymm2, ymm3);
  a.vfmaddsubpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmaddsubpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmaddsubps(xmm0, xmm1, xmm2, xmm3);
  a.vfmaddsubps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmaddsubps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmaddsubps(ymm0, ymm1, ymm2, ymm3);
  a.vfmaddsubps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmaddsubps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmsubaddpd(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubaddpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubaddpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmsubaddpd(ymm0, ymm1, ymm2, ymm3);
  a.vfmsubaddpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmsubaddpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmsubaddps(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubaddps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubaddps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmsubaddps(ymm0, ymm1, ymm2, ymm3);
  a.vfmsubaddps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmsubaddps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmsubpd(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmsubpd(ymm0, ymm1, ymm2, ymm3);
  a.vfmsubpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmsubpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmsubps(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmsubps(ymm0, ymm1, ymm2, ymm3);
  a.vfmsubps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfmsubps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfmsubsd(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubsd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubsd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfmsubss(xmm0, xmm1, xmm2, xmm3);
  a.vfmsubss(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfmsubss(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmaddpd(xmm0, xmm1, xmm2, xmm3);
  a.vfnmaddpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmaddpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmaddpd(ymm0, ymm1, ymm2, ymm3);
  a.vfnmaddpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfnmaddpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfnmaddps(xmm0, xmm1, xmm2, xmm3);
  a.vfnmaddps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmaddps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmaddps(ymm0, ymm1, ymm2, ymm3);
  a.vfnmaddps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfnmaddps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfnmaddsd(xmm0, xmm1, xmm2, xmm3);
  a.vfnmaddsd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmaddsd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmaddss(xmm0, xmm1, xmm2, xmm3);
  a.vfnmaddss(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmaddss(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmsubpd(xmm0, xmm1, xmm2, xmm3);
  a.vfnmsubpd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmsubpd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmsubpd(ymm0, ymm1, ymm2, ymm3);
  a.vfnmsubpd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfnmsubpd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfnmsubps(xmm0, xmm1, xmm2, xmm3);
  a.vfnmsubps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmsubps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmsubps(ymm0, ymm1, ymm2, ymm3);
  a.vfnmsubps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vfnmsubps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vfnmsubsd(xmm0, xmm1, xmm2, xmm3);
  a.vfnmsubsd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmsubsd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vfnmsubss(xmm0, xmm1, xmm2, xmm3);
  a.vfnmsubss(xmm0, xmm1, ptr_gp0, xmm3);
  a.vfnmsubss(xmm0, xmm1, xmm2, ptr_gp0);

  // XOP.
  a.nop();

  a.vfrczpd(xmm0, xmm1);
  a.vfrczpd(xmm0, ptr_gp0);
  a.vfrczpd(ymm0, ymm1);
  a.vfrczpd(ymm0, ptr_gp0);
  a.vfrczps(xmm0, xmm1);
  a.vfrczps(xmm0, ptr_gp0);
  a.vfrczps(ymm0, ymm1);
  a.vfrczps(ymm0, ptr_gp0);
  a.vfrczsd(xmm0, xmm1);
  a.vfrczsd(xmm0, ptr_gp0);
  a.vfrczss(xmm0, xmm1);
  a.vfrczss(xmm0, ptr_gp0);
  a.vpcmov(xmm0, xmm1, xmm2, xmm3);
  a.vpcmov(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpcmov(xmm0, xmm1, xmm2, ptr_gp0);
  a.vpcmov(ymm0, ymm1, ymm2, ymm3);
  a.vpcmov(ymm0, ymm1, ptr_gp0, ymm3);
  a.vpcmov(ymm0, ymm1, ymm2, ptr_gp0);
  a.vpcomb(xmm0, xmm1, xmm2, 0);
  a.vpcomb(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomd(xmm0, xmm1, xmm2, 0);
  a.vpcomd(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomq(xmm0, xmm1, xmm2, 0);
  a.vpcomq(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomw(xmm0, xmm1, xmm2, 0);
  a.vpcomw(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomub(xmm0, xmm1, xmm2, 0);
  a.vpcomub(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomud(xmm0, xmm1, xmm2, 0);
  a.vpcomud(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomuq(xmm0, xmm1, xmm2, 0);
  a.vpcomuq(xmm0, xmm1, ptr_gp0, 0);
  a.vpcomuw(xmm0, xmm1, xmm2, 0);
  a.vpcomuw(xmm0, xmm1, ptr_gp0, 0);
  a.vpermil2pd(xmm0, xmm1, xmm2, xmm3);
  a.vpermil2pd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpermil2pd(xmm0, xmm1, xmm2, ptr_gp0);
  a.vpermil2pd(ymm0, ymm1, ymm2, ymm3);
  a.vpermil2pd(ymm0, ymm1, ptr_gp0, ymm3);
  a.vpermil2pd(ymm0, ymm1, ymm2, ptr_gp0);
  a.vpermil2ps(xmm0, xmm1, xmm2, xmm3);
  a.vpermil2ps(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpermil2ps(xmm0, xmm1, xmm2, ptr_gp0);
  a.vpermil2ps(ymm0, ymm1, ymm2, ymm3);
  a.vpermil2ps(ymm0, ymm1, ptr_gp0, ymm3);
  a.vpermil2ps(ymm0, ymm1, ymm2, ptr_gp0);
  a.vphaddbd(xmm0, xmm1);
  a.vphaddbd(xmm0, ptr_gp0);
  a.vphaddbq(xmm0, xmm1);
  a.vphaddbq(xmm0, ptr_gp0);
  a.vphaddbw(xmm0, xmm1);
  a.vphaddbw(xmm0, ptr_gp0);
  a.vphadddq(xmm0, xmm1);
  a.vphadddq(xmm0, ptr_gp0);
  a.vphaddwd(xmm0, xmm1);
  a.vphaddwd(xmm0, ptr_gp0);
  a.vphaddwq(xmm0, xmm1);
  a.vphaddwq(xmm0, ptr_gp0);
  a.vphaddubd(xmm0, xmm1);
  a.vphaddubd(xmm0, ptr_gp0);
  a.vphaddubq(xmm0, xmm1);
  a.vphaddubq(xmm0, ptr_gp0);
  a.vphaddubw(xmm0, xmm1);
  a.vphaddubw(xmm0, ptr_gp0);
  a.vphaddudq(xmm0, xmm1);
  a.vphaddudq(xmm0, ptr_gp0);
  a.vphadduwd(xmm0, xmm1);
  a.vphadduwd(xmm0, ptr_gp0);
  a.vphadduwq(xmm0, xmm1);
  a.vphadduwq(xmm0, ptr_gp0);
  a.vphsubbw(xmm0, xmm1);
  a.vphsubbw(xmm0, ptr_gp0);
  a.vphsubdq(xmm0, xmm1);
  a.vphsubdq(xmm0, ptr_gp0);
  a.vphsubwd(xmm0, xmm1);
  a.vphsubwd(xmm0, ptr_gp0);
  a.vpmacsdd(xmm0, xmm1, xmm2, xmm3);
  a.vpmacsdd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacsdqh(xmm0, xmm1, xmm2, xmm3);
  a.vpmacsdqh(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacsdql(xmm0, xmm1, xmm2, xmm3);
  a.vpmacsdql(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacswd(xmm0, xmm1, xmm2, xmm3);
  a.vpmacswd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacsww(xmm0, xmm1, xmm2, xmm3);
  a.vpmacsww(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacssdd(xmm0, xmm1, xmm2, xmm3);
  a.vpmacssdd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacssdqh(xmm0, xmm1, xmm2, xmm3);
  a.vpmacssdqh(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacssdql(xmm0, xmm1, xmm2, xmm3);
  a.vpmacssdql(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacsswd(xmm0, xmm1, xmm2, xmm3);
  a.vpmacsswd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmacssww(xmm0, xmm1, xmm2, xmm3);
  a.vpmacssww(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmadcsswd(xmm0, xmm1, xmm2, xmm3);
  a.vpmadcsswd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpmadcswd(xmm0, xmm1, xmm2, xmm3);
  a.vpmadcswd(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpperm(xmm0, xmm1, xmm2, xmm3);
  a.vpperm(xmm0, xmm1, ptr_gp0, xmm3);
  a.vpperm(xmm0, xmm1, xmm2, ptr_gp0);
  a.vprotb(xmm0, xmm1, xmm2);
  a.vprotb(xmm0, ptr_gp0, xmm2);
  a.vprotb(xmm0, xmm1, ptr_gp0);
  a.vprotb(xmm0, xmm1, 0);
  a.vprotb(xmm0, ptr_gp0, 0);
  a.vprotd(xmm0, xmm1, xmm2);
  a.vprotd(xmm0, ptr_gp0, xmm2);
  a.vprotd(xmm0, xmm1, ptr_gp0);
  a.vprotd(xmm0, xmm1, 0);
  a.vprotd(xmm0, ptr_gp0, 0);
  a.vprotq(xmm0, xmm1, xmm2);
  a.vprotq(xmm0, ptr_gp0, xmm2);
  a.vprotq(xmm0, xmm1, ptr_gp0);
  a.vprotq(xmm0, xmm1, 0);
  a.vprotq(xmm0, ptr_gp0, 0);
  a.vprotw(xmm0, xmm1, xmm2);
  a.vprotw(xmm0, ptr_gp0, xmm2);
  a.vprotw(xmm0, xmm1, ptr_gp0);
  a.vprotw(xmm0, xmm1, 0);
  a.vprotw(xmm0, ptr_gp0, 0);
  a.vpshab(xmm0, xmm1, xmm2);
  a.vpshab(xmm0, ptr_gp0, xmm2);
  a.vpshab(xmm0, xmm1, ptr_gp0);
  a.vpshad(xmm0, xmm1, xmm2);
  a.vpshad(xmm0, ptr_gp0, xmm2);
  a.vpshad(xmm0, xmm1, ptr_gp0);
  a.vpshaq(xmm0, xmm1, xmm2);
  a.vpshaq(xmm0, ptr_gp0, xmm2);
  a.vpshaq(xmm0, xmm1, ptr_gp0);
  a.vpshaw(xmm0, xmm1, xmm2);
  a.vpshaw(xmm0, ptr_gp0, xmm2);
  a.vpshaw(xmm0, xmm1, ptr_gp0);
  a.vpshlb(xmm0, xmm1, xmm2);
  a.vpshlb(xmm0, ptr_gp0, xmm2);
  a.vpshlb(xmm0, xmm1, ptr_gp0);
  a.vpshld(xmm0, xmm1, xmm2);
  a.vpshld(xmm0, ptr_gp0, xmm2);
  a.vpshld(xmm0, xmm1, ptr_gp0);
  a.vpshlq(xmm0, xmm1, xmm2);
  a.vpshlq(xmm0, ptr_gp0, xmm2);
  a.vpshlq(xmm0, xmm1, ptr_gp0);
  a.vpshlw(xmm0, xmm1, xmm2);
  a.vpshlw(xmm0, ptr_gp0, xmm2);
  a.vpshlw(xmm0, xmm1, ptr_gp0);

  // BMI.
  a.nop();

  a.andn(gp0, gp1, zcx);
  a.andn(gp0, gp1, ptr_gp1);
  a.bextr(gp0, gp1, zcx);
  a.bextr(gp0, ptr_gp1, zcx);
  a.blsi(gp0, gp1);
  a.blsi(gp0, ptr_gp1);
  a.blsmsk(gp0, gp1);
  a.blsmsk(gp0, ptr_gp1);
  a.blsr(gp0, gp1);
  a.blsr(gp0, ptr_gp1);

  // LZCNT.
  a.nop();

  a.lzcnt(gp0, gp1);
  a.lzcnt(gp0, ptr_gp1);

  // TZCNT.
  a.nop();

  a.tzcnt(gp0, gp1);
  a.tzcnt(gp0, ptr_gp1);

  // BMI2.
  a.nop();

  a.bzhi(gp0, gp1, zcx);
  a.bzhi(gp0, ptr_gp1, zcx);
  a.mulx(gp0, gp1, zcx);
  a.mulx(gp0, gp1, ptr_gp1);
  a.pdep(gp0, gp1, zcx);
  a.pdep(gp0, gp1, ptr_gp1);
  a.pext(gp0, gp1, zcx);
  a.pext(gp0, gp1, ptr_gp1);
  a.rorx(gp0, gp1, 0);
  a.rorx(gp0, ptr_gp1, 0);
  a.sarx(gp0, gp1, zcx);
  a.sarx(gp0, ptr_gp1, zcx);
  a.shlx(gp0, gp1, zcx);
  a.shlx(gp0, ptr_gp1, zcx);
  a.shrx(gp0, gp1, zcx);
  a.shrx(gp0, ptr_gp1, zcx);

  // RDRAND.
  a.nop();

  a.rdrand(gp0);

  // F16C.
  a.nop();

  a.vcvtph2ps(xmm0, xmm1);
  a.vcvtph2ps(xmm0, ptr_gp1);
  a.vcvtph2ps(ymm0, xmm1);
  a.vcvtph2ps(ymm0, ptr_gp1);
  a.vcvtps2ph(xmm0, xmm1, 0);
  a.vcvtps2ph(ptr_gp0, xmm1, 0);
  a.vcvtps2ph(xmm0, ymm1, 0);
  a.vcvtps2ph(ptr_gp0, ymm1, 0);

  // Mark the end of the stream.
  a.nop();
}

} // asmgen namespace

// [Guard]
#endif // _APP_TEST_GENOPCODE_H
